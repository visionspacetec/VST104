
board_sierra.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000576c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005960  08005960  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005960  08005960  00015960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005968  08005968  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800596c  0800596c  0001596c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  2000000c  0800597c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  0800597c  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bcd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002606  00000000  00000000  00035c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001530  00000000  00000000  00038210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f8  00000000  00000000  00039740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b327  00000000  00000000  0003ab38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000facd  00000000  00000000  00065e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010fb94  00000000  00000000  0007592c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001854c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b34  00000000  00000000  0018553c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005900 	.word	0x08005900

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08005900 	.word	0x08005900

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f001 fab3 	bl	8001a5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f834 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 fc66 	bl	8000dc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004fc:	f000 f8e8 	bl	80006d0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000500:	f000 f960 	bl	80007c4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000504:	f000 f994 	bl	8000830 <MX_CAN2_Init>
  MX_I2C2_Init();
 8000508:	f000 f9c8 	bl	800089c <MX_I2C2_Init>
  MX_I2C3_Init();
 800050c:	f000 fa06 	bl	800091c <MX_I2C3_Init>
  MX_I2C4_Init();
 8000510:	f000 fa44 	bl	800099c <MX_I2C4_Init>
  MX_QUADSPI_Init();
 8000514:	f000 fa82 	bl	8000a1c <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000518:	f000 faac 	bl	8000a74 <MX_SPI1_Init>
  MX_SPI2_Init();
 800051c:	f000 fae8 	bl	8000af0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000520:	f000 fb24 	bl	8000b6c <MX_SPI3_Init>
  MX_UART4_Init();
 8000524:	f000 fb60 	bl	8000be8 <MX_UART4_Init>
  MX_UART5_Init();
 8000528:	f000 fb8e 	bl	8000c48 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800052c:	f000 fbbc 	bl	8000ca8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000530:	f000 fbea 	bl	8000d08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000534:	f000 fc18 	bl	8000d68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // turn on isolator for USER1
  HAL_GPIO_WritePin(GPIOC, USER1_EN_Pin, GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x6c>)
 8000540:	f002 fdce 	bl	80030e0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOF, USER1_2_Pin);
 8000544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <main+0x70>)
 800054a:	f002 fde1 	bl	8003110 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 800054e:	20c8      	movs	r0, #200	; 0xc8
 8000550:	f001 faf4 	bl	8001b3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOF, USER1_2_Pin);
 8000554:	e7f6      	b.n	8000544 <main+0x58>
 8000556:	bf00      	nop
 8000558:	48000800 	.word	0x48000800
 800055c:	48001400 	.word	0x48001400

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b0c0      	sub	sp, #256	; 0x100
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800056a:	2244      	movs	r2, #68	; 0x44
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f005 f9be 	bl	80058f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000584:	f107 031c 	add.w	r3, r7, #28
 8000588:	228c      	movs	r2, #140	; 0x8c
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f005 f9af 	bl	80058f0 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
 80005a0:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005a2:	2303      	movs	r3, #3
 80005a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2340      	movs	r3, #64	; 0x40
 80005ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005be:	2300      	movs	r3, #0
 80005c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 f893 	bl	80036f4 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005d4:	f000 fd6c 	bl	80010b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005de:	2302      	movs	r3, #2
 80005e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80005fa:	2101      	movs	r1, #1
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fc9f 	bl	8003f40 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000608:	f000 fd52 	bl	80010b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800060c:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <SystemClock_Config+0x168>)
 800060e:	61fb      	str	r3, [r7, #28]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000610:	2300      	movs	r3, #0
 8000612:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000614:	2300      	movs	r3, #0
 8000616:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000618:	2300      	movs	r3, #0
 800061a:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800061c:	2300      	movs	r3, #0
 800061e:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000620:	2300      	movs	r3, #0
 8000622:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000624:	2300      	movs	r3, #0
 8000626:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000628:	2300      	movs	r3, #0
 800062a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800062c:	2300      	movs	r3, #0
 800062e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000630:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000640:	2310      	movs	r3, #16
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800064c:	2304      	movs	r3, #4
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fe74 	bl	8004348 <HAL_RCCEx_PeriphCLKConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000666:	f000 fd23 	bl	80010b0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066e:	f002 ff0d 	bl	800348c <HAL_PWREx_ControlVoltageScaling>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000678:	f000 fd1a 	bl	80010b0 <Error_Handler>
  }
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <SystemClock_Config+0x16c>)
 800067e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000680:	4a12      	ldr	r2, [pc, #72]	; (80006cc <SystemClock_Config+0x16c>)
 8000682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000686:	6593      	str	r3, [r2, #88]	; 0x58
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <SystemClock_Config+0x16c>)
 800068a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068c:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8000690:	463b      	mov	r3, r7
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	463b      	mov	r3, r7
 8000696:	681b      	ldr	r3, [r3, #0]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 800069c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80006a6:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80006ac:	2322      	movs	r3, #34	; 0x22
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80006b0:	2320      	movs	r3, #32
 80006b2:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 f93e 	bl	8004938 <HAL_RCCEx_CRSConfig>
}
 80006bc:	bf00      	nop
 80006be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	0010419f 	.word	0x0010419f
 80006cc:	40021000 	.word	0x40021000

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f2:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <MX_ADC1_Init+0xe8>)
 80006f4:	4a31      	ldr	r2, [pc, #196]	; (80007bc <MX_ADC1_Init+0xec>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <MX_ADC1_Init+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <MX_ADC1_Init+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <MX_ADC1_Init+0xe8>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_ADC1_Init+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_ADC1_Init+0xe8>)
 8000712:	2204      	movs	r2, #4
 8000714:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_ADC1_Init+0xe8>)
 8000718:	2200      	movs	r2, #0
 800071a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <MX_ADC1_Init+0xe8>)
 800071e:	2200      	movs	r2, #0
 8000720:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000722:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <MX_ADC1_Init+0xe8>)
 8000724:	2201      	movs	r2, #1
 8000726:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_ADC1_Init+0xe8>)
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_ADC1_Init+0xe8>)
 8000732:	2201      	movs	r2, #1
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_ADC1_Init+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_ADC1_Init+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_ADC1_Init+0xe8>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_ADC1_Init+0xe8>)
 800074c:	2200      	movs	r2, #0
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_ADC1_Init+0xe8>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000758:	4817      	ldr	r0, [pc, #92]	; (80007b8 <MX_ADC1_Init+0xe8>)
 800075a:	f001 fba3 	bl	8001ea4 <HAL_ADC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000764:	f000 fca4 	bl	80010b0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_ADC1_Init+0xe8>)
 8000774:	f002 f894 	bl	80028a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800077e:	f000 fc97 	bl	80010b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_ADC1_Init+0xf0>)
 8000784:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000786:	2306      	movs	r3, #6
 8000788:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078e:	237f      	movs	r3, #127	; 0x7f
 8000790:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000792:	2304      	movs	r3, #4
 8000794:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <MX_ADC1_Init+0xe8>)
 80007a0:	f001 fcd8 	bl	8002154 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007aa:	f000 fc81 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200002d8 	.word	0x200002d8
 80007bc:	50040000 	.word	0x50040000
 80007c0:	0c900008 	.word	0x0c900008

080007c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_CAN1_Init+0x64>)
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <MX_CAN1_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_CAN1_Init+0x64>)
 80007d0:	2210      	movs	r2, #16
 80007d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_CAN1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_CAN1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_CAN1_Init+0x64>)
 80007e2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80007e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_CAN1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_CAN1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_CAN1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_CAN1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_CAN1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_CAN1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_CAN1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_CAN1_Init+0x64>)
 8000814:	f002 f8f0 	bl	80029f8 <HAL_CAN_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800081e:	f000 fc47 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000054c 	.word	0x2000054c
 800082c:	40006400 	.word	0x40006400

08000830 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_CAN2_Init+0x64>)
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <MX_CAN2_Init+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_CAN2_Init+0x64>)
 800083c:	2210      	movs	r2, #16
 800083e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_CAN2_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_CAN2_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_CAN2_Init+0x64>)
 800084e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000852:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_CAN2_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_CAN2_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_CAN2_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_CAN2_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_CAN2_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_CAN2_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_CAN2_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_CAN2_Init+0x64>)
 8000880:	f002 f8ba 	bl	80029f8 <HAL_CAN_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800088a:	f000 fc11 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000340 	.word	0x20000340
 8000898:	40006800 	.word	0x40006800

0800089c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_I2C2_Init+0x74>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_I2C2_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00606497;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_I2C2_Init+0x74>)
 80008a8:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <MX_I2C2_Init+0x7c>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_I2C2_Init+0x74>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_I2C2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_I2C2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_I2C2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d6:	480e      	ldr	r0, [pc, #56]	; (8000910 <MX_I2C2_Init+0x74>)
 80008d8:	f002 fc33 	bl	8003142 <HAL_I2C_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008e2:	f000 fbe5 	bl	80010b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <MX_I2C2_Init+0x74>)
 80008ea:	f002 fcb9 	bl	8003260 <HAL_I2CEx_ConfigAnalogFilter>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f4:	f000 fbdc 	bl	80010b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_I2C2_Init+0x74>)
 80008fc:	f002 fcfb 	bl	80032f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 fbd3 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200001a8 	.word	0x200001a8
 8000914:	40005800 	.word	0x40005800
 8000918:	00606497 	.word	0x00606497

0800091c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_I2C3_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_I2C3_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00606497;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_I2C3_Init+0x74>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <MX_I2C3_Init+0x7c>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_I2C3_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_I2C3_Init+0x74>)
 8000934:	2201      	movs	r2, #1
 8000936:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_I2C3_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_I2C3_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_I2C3_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_I2C3_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_I2C3_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <MX_I2C3_Init+0x74>)
 8000958:	f002 fbf3 	bl	8003142 <HAL_I2C_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000962:	f000 fba5 	bl	80010b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <MX_I2C3_Init+0x74>)
 800096a:	f002 fc79 	bl	8003260 <HAL_I2CEx_ConfigAnalogFilter>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000974:	f000 fb9c 	bl	80010b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_I2C3_Init+0x74>)
 800097c:	f002 fcbb 	bl	80032f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 fb93 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000002c 	.word	0x2000002c
 8000994:	40005c00 	.word	0x40005c00
 8000998:	00606497 	.word	0x00606497

0800099c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <MX_I2C4_Init+0x78>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00606497;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <MX_I2C4_Init+0x7c>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009d6:	480e      	ldr	r0, [pc, #56]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009d8:	f002 fbb3 	bl	8003142 <HAL_I2C_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009e2:	f000 fb65 	bl	80010b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009ea:	f002 fc39 	bl	8003260 <HAL_I2CEx_ConfigAnalogFilter>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80009f4:	f000 fb5c 	bl	80010b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_I2C4_Init+0x74>)
 80009fc:	f002 fc7b 	bl	80032f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a06:	f000 fb53 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000078 	.word	0x20000078
 8000a14:	40008400 	.word	0x40008400
 8000a18:	00606497 	.word	0x00606497

08000a1c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_QUADSPI_Init+0x50>)
 8000a22:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <MX_QUADSPI_Init+0x54>)
 8000a24:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_QUADSPI_Init+0x50>)
 8000a28:	22ff      	movs	r2, #255	; 0xff
 8000a2a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_QUADSPI_Init+0x50>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_QUADSPI_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_QUADSPI_Init+0x50>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_QUADSPI_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_QUADSPI_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_QUADSPI_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_QUADSPI_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_QUADSPI_Init+0x50>)
 8000a58:	f002 fd7e 	bl	8003558 <HAL_QSPI_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000a62:	f000 fb25 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000574 	.word	0x20000574
 8000a70:	a0001000 	.word	0xa0001000

08000a74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <MX_SPI1_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000a80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000a8e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000ac2:	2207      	movs	r2, #7
 8000ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000ace:	2208      	movs	r2, #8
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_SPI1_Init+0x74>)
 8000ad4:	f004 f93c 	bl	8004d50 <HAL_SPI_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ade:	f000 fae7 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000468 	.word	0x20000468
 8000aec:	40013000 	.word	0x40013000

08000af0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <MX_SPI2_Init+0x78>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b0a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b0e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b22:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b3e:	2207      	movs	r2, #7
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_SPI2_Init+0x74>)
 8000b50:	f004 f8fe 	bl	8004d50 <HAL_SPI_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 faa9 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000c4 	.word	0x200000c4
 8000b68:	40003800 	.word	0x40003800

08000b6c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000b72:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <MX_SPI3_Init+0x78>)
 8000b74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000b86:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b8a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000bba:	2207      	movs	r2, #7
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000bc6:	2208      	movs	r2, #8
 8000bc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_SPI3_Init+0x74>)
 8000bcc:	f004 f8c0 	bl	8004d50 <HAL_SPI_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000bd6:	f000 fa6b 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200001f4 	.word	0x200001f4
 8000be4:	40003c00 	.word	0x40003c00

08000be8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_UART4_Init+0x58>)
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <MX_UART4_Init+0x5c>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_UART4_Init+0x58>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_UART4_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_UART4_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_UART4_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_UART4_Init+0x58>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_UART4_Init+0x58>)
 8000c14:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c18:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_UART4_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_UART4_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_UART4_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_UART4_Init+0x58>)
 8000c2e:	f004 f919 	bl	8004e64 <HAL_UART_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8000c38:	f000 fa3a 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200003e8 	.word	0x200003e8
 8000c44:	40004c00 	.word	0x40004c00

08000c48 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_UART5_Init+0x58>)
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <MX_UART5_Init+0x5c>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_UART5_Init+0x58>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_UART5_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_UART5_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_UART5_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_UART5_Init+0x58>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_UART5_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_UART5_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_UART5_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_UART5_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_UART5_Init+0x58>)
 8000c8c:	f004 f8ea 	bl	8004e64 <HAL_UART_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000c96:	f000 fa0b 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000258 	.word	0x20000258
 8000ca4:	40005000 	.word	0x40005000

08000ca8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <MX_USART1_UART_Init+0x5c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cd4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cd8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cee:	f004 f8b9 	bl	8004e64 <HAL_UART_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000cf8:	f000 f9da 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000368 	.word	0x20000368
 8000d04:	40013800 	.word	0x40013800

08000d08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <MX_USART2_UART_Init+0x5c>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d34:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d38:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d4e:	f004 f889 	bl	8004e64 <HAL_UART_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000d58:	f000 f9aa 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200004cc 	.word	0x200004cc
 8000d64:	40004400 	.word	0x40004400

08000d68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_USART3_UART_Init+0x58>)
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_USART3_UART_Init+0x58>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_USART3_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_USART3_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USART3_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_USART3_UART_Init+0x58>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_USART3_UART_Init+0x58>)
 8000d94:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d98:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USART3_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_USART3_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_USART3_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_USART3_UART_Init+0x58>)
 8000dae:	f004 f859 	bl	8004e64 <HAL_UART_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8000db8:	f000 f97a 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000128 	.word	0x20000128
 8000dc4:	40004800 	.word	0x40004800

08000dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08e      	sub	sp, #56	; 0x38
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dde:	4bac      	ldr	r3, [pc, #688]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4aab      	ldr	r2, [pc, #684]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000de4:	f043 0310 	orr.w	r3, r3, #16
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4ba9      	ldr	r3, [pc, #676]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	623b      	str	r3, [r7, #32]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4ba6      	ldr	r3, [pc, #664]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4aa5      	ldr	r2, [pc, #660]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4ba3      	ldr	r3, [pc, #652]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0e:	4ba0      	ldr	r3, [pc, #640]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a9f      	ldr	r2, [pc, #636]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e14:	f043 0320 	orr.w	r3, r3, #32
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b9d      	ldr	r3, [pc, #628]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e26:	4b9a      	ldr	r3, [pc, #616]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a99      	ldr	r2, [pc, #612]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b97      	ldr	r3, [pc, #604]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b94      	ldr	r3, [pc, #592]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a93      	ldr	r2, [pc, #588]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b91      	ldr	r3, [pc, #580]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	4b8e      	ldr	r3, [pc, #568]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a8d      	ldr	r2, [pc, #564]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b8b      	ldr	r3, [pc, #556]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6e:	4b88      	ldr	r3, [pc, #544]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a87      	ldr	r2, [pc, #540]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b85      	ldr	r3, [pc, #532]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	4b82      	ldr	r3, [pc, #520]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a81      	ldr	r2, [pc, #516]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b7f      	ldr	r3, [pc, #508]	; (8001090 <MX_GPIO_Init+0x2c8>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000e9e:	f002 fb4b 	bl	8003538 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSC_EN_GPIO_Port, OSC_EN_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	487b      	ldr	r0, [pc, #492]	; (8001094 <MX_GPIO_Init+0x2cc>)
 8000ea8:	f002 f91a 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_HOLD_Pin|SPI1_WP_Pin|SPI1_CS_1_Pin|SPI2_CS1_Pin
 8000eac:	2200      	movs	r2, #0
 8000eae:	f240 31d3 	movw	r1, #979	; 0x3d3
 8000eb2:	4879      	ldr	r0, [pc, #484]	; (8001098 <MX_GPIO_Init+0x2d0>)
 8000eb4:	f002 f914 	bl	80030e0 <HAL_GPIO_WritePin>
                          |SPI3_CS1_Pin|USER1_EN_Pin|USER_SPI1_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f240 111b 	movw	r1, #283	; 0x11b
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f002 f90d 	bl	80030e0 <HAL_GPIO_WritePin>
                          |USER2_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI2_CS2_Pin|USER1_2_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ecc:	4873      	ldr	r0, [pc, #460]	; (800109c <MX_GPIO_Init+0x2d4>)
 8000ece:	f002 f907 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI3_CS2_Pin|WATCHDOG_Pin|GLO_EN_Pin|CPU_EN_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f648 4180 	movw	r1, #35968	; 0x8c80
 8000ed8:	4871      	ldr	r0, [pc, #452]	; (80010a0 <MX_GPIO_Init+0x2d8>)
 8000eda:	f002 f901 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, I2C4_EN_Pin|USER6_EN_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ee4:	486f      	ldr	r0, [pc, #444]	; (80010a4 <MX_GPIO_Init+0x2dc>)
 8000ee6:	f002 f8fb 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, UART3_EN_Pin|CAN2_EN_Pin|I2C3_EN_Pin|CAN1_EN_Pin
 8000eea:	2200      	movs	r2, #0
 8000eec:	f24e 4183 	movw	r1, #58499	; 0xe483
 8000ef0:	486d      	ldr	r0, [pc, #436]	; (80010a8 <MX_GPIO_Init+0x2e0>)
 8000ef2:	f002 f8f5 	bl	80030e0 <HAL_GPIO_WritePin>
                          |USER_SPI2_EN_Pin|USER5_EN_Pin|I2C2_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, UART2_EN_Pin|UART4_EN_Pin|UART1_EN_Pin|SPI3_EN_Pin
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f249 017c 	movw	r1, #36988	; 0x907c
 8000efc:	486b      	ldr	r0, [pc, #428]	; (80010ac <MX_GPIO_Init+0x2e4>)
 8000efe:	f002 f8ef 	bl	80030e0 <HAL_GPIO_WritePin>
                          |SPI2_EN_Pin|USER4_EN_Pin|USER3_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : USER6_2_Pin USER5_3_Pin USER5_2_Pin USER6_1_Pin
                           USER4_4_Pin USER2_1_Pin USER2_2_Pin FAULT_Pin
                           SYNC_Pin MODE_Pin USER6_3_Pin USER6_4_Pin */
  GPIO_InitStruct.Pin = USER6_2_Pin|USER5_3_Pin|USER5_2_Pin|USER6_1_Pin
 8000f02:	f247 337f 	movw	r3, #29567	; 0x737f
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
                          |USER4_4_Pin|USER2_1_Pin|USER2_2_Pin|FAULT_Pin
                          |SYNC_Pin|MODE_Pin|USER6_3_Pin|USER6_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4862      	ldr	r0, [pc, #392]	; (80010a0 <MX_GPIO_Init+0x2d8>)
 8000f18:	f001 ff50 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USER4_3_Pin USER5_4_Pin USER5_1_Pin USER3_1_Pin
                           USER3_2_Pin USER1_4_Pin */
  GPIO_InitStruct.Pin = USER4_3_Pin|USER5_4_Pin|USER5_1_Pin|USER3_1_Pin
 8000f1c:	f649 0338 	movw	r3, #38968	; 0x9838
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
                          |USER3_2_Pin|USER1_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	485a      	ldr	r0, [pc, #360]	; (800109c <MX_GPIO_Init+0x2d4>)
 8000f32:	f001 ff43 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OSC_EN_Pin */
  GPIO_InitStruct.Pin = OSC_EN_Pin;
 8000f36:	2302      	movs	r3, #2
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OSC_EN_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4851      	ldr	r0, [pc, #324]	; (8001094 <MX_GPIO_Init+0x2cc>)
 8000f4e:	f001 ff35 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_HOLD_Pin SPI1_WP_Pin SPI1_CS_1_Pin SPI2_CS1_Pin
                           SPI3_CS1_Pin USER1_EN_Pin USER_SPI1_EN_Pin */
  GPIO_InitStruct.Pin = SPI1_HOLD_Pin|SPI1_WP_Pin|SPI1_CS_1_Pin|SPI2_CS1_Pin
 8000f52:	f240 33d3 	movw	r3, #979	; 0x3d3
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI3_CS1_Pin|USER1_EN_Pin|USER_SPI1_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	484b      	ldr	r0, [pc, #300]	; (8001098 <MX_GPIO_Init+0x2d0>)
 8000f6c:	f001 ff26 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CS1_Pin QSPI_CS2_Pin SPI1_CS3_Pin SPI1_CS2_Pin
                           USER2_EN_Pin */
  GPIO_InitStruct.Pin = QSPI_CS1_Pin|QSPI_CS2_Pin|SPI1_CS3_Pin|SPI1_CS2_Pin
 8000f70:	f240 131b 	movw	r3, #283	; 0x11b
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
                          |USER2_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f001 ff16 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER4_2_Pin */
  GPIO_InitStruct.Pin = USER4_2_Pin;
 8000f90:	2320      	movs	r3, #32
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER4_2_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	483d      	ldr	r0, [pc, #244]	; (8001098 <MX_GPIO_Init+0x2d0>)
 8000fa4:	f001 ff0a 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USER4_1_Pin USER3_3_Pin USER3_4_Pin */
  GPIO_InitStruct.Pin = USER4_1_Pin|USER3_3_Pin|USER3_4_Pin;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	483a      	ldr	r0, [pc, #232]	; (80010a4 <MX_GPIO_Init+0x2dc>)
 8000fbc:	f001 fefe 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS2_Pin USER1_2_Pin */
  GPIO_InitStruct.Pin = SPI2_CS2_Pin|USER1_2_Pin;
 8000fc0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4830      	ldr	r0, [pc, #192]	; (800109c <MX_GPIO_Init+0x2d4>)
 8000fda:	f001 feef 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USER1_1_Pin USER2_4_Pin */
  GPIO_InitStruct.Pin = USER1_1_Pin|USER2_4_Pin;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	482e      	ldr	r0, [pc, #184]	; (80010ac <MX_GPIO_Init+0x2e4>)
 8000ff2:	f001 fee3 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_CS2_Pin WATCHDOG_Pin GLO_EN_Pin CPU_EN_Pin */
  GPIO_InitStruct.Pin = SPI3_CS2_Pin|WATCHDOG_Pin|GLO_EN_Pin|CPU_EN_Pin;
 8000ff6:	f648 4380 	movw	r3, #35968	; 0x8c80
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	4619      	mov	r1, r3
 800100e:	4824      	ldr	r0, [pc, #144]	; (80010a0 <MX_GPIO_Init+0x2d8>)
 8001010:	f001 fed4 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_EN_Pin USER6_EN_Pin */
  GPIO_InitStruct.Pin = I2C4_EN_Pin|USER6_EN_Pin;
 8001014:	f241 0310 	movw	r3, #4112	; 0x1010
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	481d      	ldr	r0, [pc, #116]	; (80010a4 <MX_GPIO_Init+0x2dc>)
 800102e:	f001 fec5 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : UART3_EN_Pin CAN2_EN_Pin I2C3_EN_Pin CAN1_EN_Pin
                           USER_SPI2_EN_Pin USER5_EN_Pin I2C2_EN_Pin */
  GPIO_InitStruct.Pin = UART3_EN_Pin|CAN2_EN_Pin|I2C3_EN_Pin|CAN1_EN_Pin
 8001032:	f24e 4383 	movw	r3, #58499	; 0xe483
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
                          |USER_SPI2_EN_Pin|USER5_EN_Pin|I2C2_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	4817      	ldr	r0, [pc, #92]	; (80010a8 <MX_GPIO_Init+0x2e0>)
 800104c:	f001 feb6 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : UART2_EN_Pin UART4_EN_Pin UART1_EN_Pin SPI3_EN_Pin
                           SPI2_EN_Pin USER4_EN_Pin USER3_EN_Pin */
  GPIO_InitStruct.Pin = UART2_EN_Pin|UART4_EN_Pin|UART1_EN_Pin|SPI3_EN_Pin
 8001050:	f249 037c 	movw	r3, #36988	; 0x907c
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI2_EN_Pin|USER4_EN_Pin|USER3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	4810      	ldr	r0, [pc, #64]	; (80010ac <MX_GPIO_Init+0x2e4>)
 800106a:	f001 fea7 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_Pin */
  GPIO_InitStruct.Pin = BOOT_Pin;
 800106e:	2308      	movs	r3, #8
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_GPIO_Init+0x2cc>)
 8001082:	f001 fe9b 	bl	8002dbc <HAL_GPIO_Init>

}
 8001086:	bf00      	nop
 8001088:	3738      	adds	r7, #56	; 0x38
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	48001c00 	.word	0x48001c00
 8001098:	48000800 	.word	0x48000800
 800109c:	48001400 	.word	0x48001400
 80010a0:	48001000 	.word	0x48001000
 80010a4:	48000400 	.word	0x48000400
 80010a8:	48000c00 	.word	0x48000c00
 80010ac:	48001800 	.word	0x48001800

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_MspInit+0x60>)
 80010d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <HAL_MspInit+0x60>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6613      	str	r3, [r2, #96]	; 0x60
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_MspInit+0x60>)
 80010de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <HAL_MspInit+0x60>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <HAL_MspInit+0x60>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f2:	6593      	str	r3, [r2, #88]	; 0x58
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_MspInit+0x60>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	4618      	mov	r0, r3
 800110e:	f002 f93f 	bl	8003390 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8001112:	f002 f99d 	bl	8003450 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a15      	ldr	r2, [pc, #84]	; (8001198 <HAL_ADC_MspInit+0x74>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d123      	bne.n	800118e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_ADC_MspInit+0x78>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a14      	ldr	r2, [pc, #80]	; (800119c <HAL_ADC_MspInit+0x78>)
 800114c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_ADC_MspInit+0x78>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_ADC_MspInit+0x78>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <HAL_ADC_MspInit+0x78>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_ADC_MspInit+0x78>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = EF2_CUR_Pin|EF1_CUR_Pin;
 8001176:	230c      	movs	r3, #12
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800117a:	230b      	movs	r3, #11
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_ADC_MspInit+0x7c>)
 800118a:	f001 fe17 	bl	8002dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	50040000 	.word	0x50040000
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000800 	.word	0x48000800

080011a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a45      	ldr	r2, [pc, #276]	; (80012d8 <HAL_CAN_MspInit+0x134>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d132      	bne.n	800122c <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80011c6:	4b45      	ldr	r3, [pc, #276]	; (80012dc <HAL_CAN_MspInit+0x138>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a43      	ldr	r2, [pc, #268]	; (80012dc <HAL_CAN_MspInit+0x138>)
 80011ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80011d0:	4b42      	ldr	r3, [pc, #264]	; (80012dc <HAL_CAN_MspInit+0x138>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10b      	bne.n	80011f0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80011d8:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e2:	6593      	str	r3, [r2, #88]	; 0x58
 80011e4:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	4a3a      	ldr	r2, [pc, #232]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 8001208:	f44f 7340 	mov.w	r3, #768	; 0x300
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800121a:	2309      	movs	r3, #9
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	482f      	ldr	r0, [pc, #188]	; (80012e4 <HAL_CAN_MspInit+0x140>)
 8001226:	f001 fdc9 	bl	8002dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800122a:	e051      	b.n	80012d0 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <HAL_CAN_MspInit+0x144>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d14c      	bne.n	80012d0 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 800123c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001240:	6593      	str	r3, [r2, #88]	; 0x58
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_CAN_MspInit+0x138>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	4a21      	ldr	r2, [pc, #132]	; (80012dc <HAL_CAN_MspInit+0x138>)
 8001256:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_CAN_MspInit+0x138>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d10b      	bne.n	8001278 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 8001266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800126a:	6593      	str	r3, [r2, #88]	; 0x58
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_CAN_MspInit+0x13c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAN2_RX_Pin;
 8001290:	2320      	movs	r3, #32
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 80012a0:	2303      	movs	r3, #3
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CAN2_RX_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	480e      	ldr	r0, [pc, #56]	; (80012e4 <HAL_CAN_MspInit+0x140>)
 80012ac:	f001 fd86 	bl	8002dbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN2_TX_Pin;
 80012b0:	2340      	movs	r3, #64	; 0x40
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 80012c0:	2308      	movs	r3, #8
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CAN2_TX_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <HAL_CAN_MspInit+0x140>)
 80012cc:	f001 fd76 	bl	8002dbc <HAL_GPIO_Init>
}
 80012d0:	bf00      	nop
 80012d2:	3730      	adds	r7, #48	; 0x30
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40006400 	.word	0x40006400
 80012dc:	20000028 	.word	0x20000028
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	40006800 	.word	0x40006800

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a47      	ldr	r2, [pc, #284]	; (8001428 <HAL_I2C_MspInit+0x13c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d128      	bne.n	8001360 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_I2C_MspInit+0x140>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a46      	ldr	r2, [pc, #280]	; (800142c <HAL_I2C_MspInit+0x140>)
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b44      	ldr	r3, [pc, #272]	; (800142c <HAL_I2C_MspInit+0x140>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	623b      	str	r3, [r7, #32]
 8001324:	6a3b      	ldr	r3, [r7, #32]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8001326:	2303      	movs	r3, #3
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132a:	2312      	movs	r3, #18
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001336:	2304      	movs	r3, #4
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	483b      	ldr	r0, [pc, #236]	; (8001430 <HAL_I2C_MspInit+0x144>)
 8001342:	f001 fd3b 	bl	8002dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_I2C_MspInit+0x140>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	4a38      	ldr	r2, [pc, #224]	; (800142c <HAL_I2C_MspInit+0x140>)
 800134c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001350:	6593      	str	r3, [r2, #88]	; 0x58
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <HAL_I2C_MspInit+0x140>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800135e:	e05e      	b.n	800141e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a33      	ldr	r2, [pc, #204]	; (8001434 <HAL_I2C_MspInit+0x148>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d12b      	bne.n	80013c2 <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <HAL_I2C_MspInit+0x140>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a2f      	ldr	r2, [pc, #188]	; (800142c <HAL_I2C_MspInit+0x140>)
 8001370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_I2C_MspInit+0x140>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001382:	f002 f8d9 	bl	8003538 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin|I2C3_SDA_Pin;
 8001386:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138c:	2312      	movs	r3, #18
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001390:	2301      	movs	r3, #1
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001398:	2304      	movs	r3, #4
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	4825      	ldr	r0, [pc, #148]	; (8001438 <HAL_I2C_MspInit+0x14c>)
 80013a4:	f001 fd0a 	bl	8002dbc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_I2C_MspInit+0x140>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	4a1f      	ldr	r2, [pc, #124]	; (800142c <HAL_I2C_MspInit+0x140>)
 80013ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013b2:	6593      	str	r3, [r2, #88]	; 0x58
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_I2C_MspInit+0x140>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	697b      	ldr	r3, [r7, #20]
}
 80013c0:	e02d      	b.n	800141e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1d      	ldr	r2, [pc, #116]	; (800143c <HAL_I2C_MspInit+0x150>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d128      	bne.n	800141e <HAL_I2C_MspInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_I2C_MspInit+0x140>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d0:	4a16      	ldr	r2, [pc, #88]	; (800142c <HAL_I2C_MspInit+0x140>)
 80013d2:	f043 0302 	orr.w	r3, r3, #2
 80013d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_I2C_MspInit+0x140>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 80013e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ea:	2312      	movs	r3, #18
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80013f6:	2303      	movs	r3, #3
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <HAL_I2C_MspInit+0x154>)
 8001402:	f001 fcdb 	bl	8002dbc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_I2C_MspInit+0x140>)
 8001408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140a:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_I2C_MspInit+0x140>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_I2C_MspInit+0x140>)
 8001414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
}
 800141e:	bf00      	nop
 8001420:	3738      	adds	r7, #56	; 0x38
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40005800 	.word	0x40005800
 800142c:	40021000 	.word	0x40021000
 8001430:	48001400 	.word	0x48001400
 8001434:	40005c00 	.word	0x40005c00
 8001438:	48001800 	.word	0x48001800
 800143c:	40008400 	.word	0x40008400
 8001440:	48000400 	.word	0x48000400

08001444 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a2e      	ldr	r2, [pc, #184]	; (800151c <HAL_QSPI_MspInit+0xd8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d156      	bne.n	8001514 <HAL_QSPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <HAL_QSPI_MspInit+0xdc>)
 8001468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800146a:	4a2d      	ldr	r2, [pc, #180]	; (8001520 <HAL_QSPI_MspInit+0xdc>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	6513      	str	r3, [r2, #80]	; 0x50
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <HAL_QSPI_MspInit+0xdc>)
 8001474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <HAL_QSPI_MspInit+0xdc>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_QSPI_MspInit+0xdc>)
 8001484:	f043 0320 	orr.w	r3, r3, #32
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b25      	ldr	r3, [pc, #148]	; (8001520 <HAL_QSPI_MspInit+0xdc>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <HAL_QSPI_MspInit+0xdc>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a21      	ldr	r2, [pc, #132]	; (8001520 <HAL_QSPI_MspInit+0xdc>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <HAL_QSPI_MspInit+0xdc>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PA2     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin|QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80014ae:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014c0:	230a      	movs	r3, #10
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4816      	ldr	r0, [pc, #88]	; (8001524 <HAL_QSPI_MspInit+0xe0>)
 80014cc:	f001 fc76 	bl	8002dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80014d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_QUADSPI;
 80014e2:	2303      	movs	r3, #3
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <HAL_QSPI_MspInit+0xe0>)
 80014ee:	f001 fc65 	bl	8002dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CS3_Pin;
 80014f2:	2304      	movs	r3, #4
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001502:	230a      	movs	r3, #10
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CS3_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001510:	f001 fc54 	bl	8002dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	a0001000 	.word	0xa0001000
 8001520:	40021000 	.word	0x40021000
 8001524:	48001400 	.word	0x48001400

08001528 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08e      	sub	sp, #56	; 0x38
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a47      	ldr	r2, [pc, #284]	; (8001664 <HAL_SPI_MspInit+0x13c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d129      	bne.n	800159e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_SPI_MspInit+0x140>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	4a46      	ldr	r2, [pc, #280]	; (8001668 <HAL_SPI_MspInit+0x140>)
 8001550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001554:	6613      	str	r3, [r2, #96]	; 0x60
 8001556:	4b44      	ldr	r3, [pc, #272]	; (8001668 <HAL_SPI_MspInit+0x140>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155e:	623b      	str	r3, [r7, #32]
 8001560:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_SPI_MspInit+0x140>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a40      	ldr	r2, [pc, #256]	; (8001668 <HAL_SPI_MspInit+0x140>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <HAL_SPI_MspInit+0x140>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800157a:	23e0      	movs	r3, #224	; 0xe0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158a:	2305      	movs	r3, #5
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001598:	f001 fc10 	bl	8002dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800159c:	e05e      	b.n	800165c <HAL_SPI_MspInit+0x134>
  else if(hspi->Instance==SPI2)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a32      	ldr	r2, [pc, #200]	; (800166c <HAL_SPI_MspInit+0x144>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d129      	bne.n	80015fc <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_SPI_MspInit+0x140>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ac:	4a2e      	ldr	r2, [pc, #184]	; (8001668 <HAL_SPI_MspInit+0x140>)
 80015ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b2:	6593      	str	r3, [r2, #88]	; 0x58
 80015b4:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <HAL_SPI_MspInit+0x140>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <HAL_SPI_MspInit+0x140>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	4a28      	ldr	r2, [pc, #160]	; (8001668 <HAL_SPI_MspInit+0x140>)
 80015c6:	f043 0302 	orr.w	r3, r3, #2
 80015ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015cc:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_SPI_MspInit+0x140>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80015d8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ea:	2305      	movs	r3, #5
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	481e      	ldr	r0, [pc, #120]	; (8001670 <HAL_SPI_MspInit+0x148>)
 80015f6:	f001 fbe1 	bl	8002dbc <HAL_GPIO_Init>
}
 80015fa:	e02f      	b.n	800165c <HAL_SPI_MspInit+0x134>
  else if(hspi->Instance==SPI3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_SPI_MspInit+0x14c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d12a      	bne.n	800165c <HAL_SPI_MspInit+0x134>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_SPI_MspInit+0x140>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_SPI_MspInit+0x140>)
 800160c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001610:	6593      	str	r3, [r2, #88]	; 0x58
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_SPI_MspInit+0x140>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_SPI_MspInit+0x140>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_SPI_MspInit+0x140>)
 8001624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_SPI_MspInit+0x140>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001636:	f001 ff7f 	bl	8003538 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin|SPI3_MISO_Pin|SPI3_MOSI_Pin;
 800163a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800164c:	2306      	movs	r3, #6
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <HAL_SPI_MspInit+0x150>)
 8001658:	f001 fbb0 	bl	8002dbc <HAL_GPIO_Init>
}
 800165c:	bf00      	nop
 800165e:	3738      	adds	r7, #56	; 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40013000 	.word	0x40013000
 8001668:	40021000 	.word	0x40021000
 800166c:	40003800 	.word	0x40003800
 8001670:	48000400 	.word	0x48000400
 8001674:	40003c00 	.word	0x40003c00
 8001678:	48001800 	.word	0x48001800

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	; 0x50
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4aa0      	ldr	r2, [pc, #640]	; (800191c <HAL_UART_MspInit+0x2a0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d163      	bne.n	8001766 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800169e:	4ba0      	ldr	r3, [pc, #640]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	4a9f      	ldr	r2, [pc, #636]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016a8:	6593      	str	r3, [r2, #88]	; 0x58
 80016aa:	4b9d      	ldr	r3, [pc, #628]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80016b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b9a      	ldr	r3, [pc, #616]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a99      	ldr	r2, [pc, #612]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b97      	ldr	r3, [pc, #604]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
 80016cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b94      	ldr	r3, [pc, #592]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a93      	ldr	r2, [pc, #588]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b91      	ldr	r3, [pc, #580]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
 80016e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b8e      	ldr	r3, [pc, #568]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a8d      	ldr	r2, [pc, #564]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA15 (JTDI)     ------> UART4_RTS
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    PB7     ------> UART4_CTS
    */
    GPIO_InitStruct.Pin = UART4_RST_Pin;
 80016fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001710:	2308      	movs	r3, #8
 8001712:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(UART4_RST_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f001 fb4d 	bl	8002dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8001722:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001734:	2308      	movs	r3, #8
 8001736:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800173c:	4619      	mov	r1, r3
 800173e:	4879      	ldr	r0, [pc, #484]	; (8001924 <HAL_UART_MspInit+0x2a8>)
 8001740:	f001 fb3c 	bl	8002dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART4_CTS_Pin;
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001754:	2308      	movs	r3, #8
 8001756:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(UART4_CTS_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800175c:	4619      	mov	r1, r3
 800175e:	4872      	ldr	r0, [pc, #456]	; (8001928 <HAL_UART_MspInit+0x2ac>)
 8001760:	f001 fb2c 	bl	8002dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001764:	e0d6      	b.n	8001914 <HAL_UART_MspInit+0x298>
  else if(huart->Instance==UART5)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a70      	ldr	r2, [pc, #448]	; (800192c <HAL_UART_MspInit+0x2b0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d145      	bne.n	80017fc <HAL_UART_MspInit+0x180>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001770:	4b6b      	ldr	r3, [pc, #428]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	4a6a      	ldr	r2, [pc, #424]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 8001776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800177a:	6593      	str	r3, [r2, #88]	; 0x58
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
 8001786:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001788:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	4a64      	ldr	r2, [pc, #400]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001794:	4b62      	ldr	r3, [pc, #392]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a0:	4b5f      	ldr	r3, [pc, #380]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	4a5e      	ldr	r2, [pc, #376]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80017a6:	f043 0308 	orr.w	r3, r3, #8
 80017aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ac:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	623b      	str	r3, [r7, #32]
 80017b6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 80017b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017ca:	2308      	movs	r3, #8
 80017cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017d2:	4619      	mov	r1, r3
 80017d4:	4853      	ldr	r0, [pc, #332]	; (8001924 <HAL_UART_MspInit+0x2a8>)
 80017d6:	f001 faf1 	bl	8002dbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 80017da:	2304      	movs	r3, #4
 80017dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017ea:	2308      	movs	r3, #8
 80017ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017f2:	4619      	mov	r1, r3
 80017f4:	484e      	ldr	r0, [pc, #312]	; (8001930 <HAL_UART_MspInit+0x2b4>)
 80017f6:	f001 fae1 	bl	8002dbc <HAL_GPIO_Init>
}
 80017fa:	e08b      	b.n	8001914 <HAL_UART_MspInit+0x298>
  else if(huart->Instance==USART1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a4c      	ldr	r2, [pc, #304]	; (8001934 <HAL_UART_MspInit+0x2b8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d12a      	bne.n	800185c <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001806:	4b46      	ldr	r3, [pc, #280]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	4a45      	ldr	r2, [pc, #276]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6613      	str	r3, [r2, #96]	; 0x60
 8001812:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a3f      	ldr	r2, [pc, #252]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin|UART1_CTS_Pin|UART1_RST_Pin;
 8001836:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001848:	2307      	movs	r3, #7
 800184a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001850:	4619      	mov	r1, r3
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	f001 fab1 	bl	8002dbc <HAL_GPIO_Init>
}
 800185a:	e05b      	b.n	8001914 <HAL_UART_MspInit+0x298>
  else if(huart->Instance==USART2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a35      	ldr	r2, [pc, #212]	; (8001938 <HAL_UART_MspInit+0x2bc>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d128      	bne.n	80018b8 <HAL_UART_MspInit+0x23c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	6593      	str	r3, [r2, #88]	; 0x58
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART2_CTS_Pin|UART2_RST_Pin|UART2_TX_Pin|UART2_RX_Pin;
 8001896:	2378      	movs	r3, #120	; 0x78
 8001898:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a6:	2307      	movs	r3, #7
 80018a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018ae:	4619      	mov	r1, r3
 80018b0:	481f      	ldr	r0, [pc, #124]	; (8001930 <HAL_UART_MspInit+0x2b4>)
 80018b2:	f001 fa83 	bl	8002dbc <HAL_GPIO_Init>
}
 80018b6:	e02d      	b.n	8001914 <HAL_UART_MspInit+0x298>
  else if(huart->Instance==USART3)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1f      	ldr	r2, [pc, #124]	; (800193c <HAL_UART_MspInit+0x2c0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d128      	bne.n	8001914 <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	4a16      	ldr	r2, [pc, #88]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6593      	str	r3, [r2, #88]	; 0x58
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_UART_MspInit+0x2a4>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART3_TX_Pin|UART3_RX_Pin|UART3_CTS_Pin|UART3_RST_Pin;
 80018f2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001904:	2307      	movs	r3, #7
 8001906:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001908:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800190c:	4619      	mov	r1, r3
 800190e:	4808      	ldr	r0, [pc, #32]	; (8001930 <HAL_UART_MspInit+0x2b4>)
 8001910:	f001 fa54 	bl	8002dbc <HAL_GPIO_Init>
}
 8001914:	bf00      	nop
 8001916:	3750      	adds	r7, #80	; 0x50
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40004c00 	.word	0x40004c00
 8001920:	40021000 	.word	0x40021000
 8001924:	48000800 	.word	0x48000800
 8001928:	48000400 	.word	0x48000400
 800192c:	40005000 	.word	0x40005000
 8001930:	48000c00 	.word	0x48000c00
 8001934:	40013800 	.word	0x40013800
 8001938:	40004400 	.word	0x40004400
 800193c:	40004800 	.word	0x40004800

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <MemManage_Handler+0x4>

0800195a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler+0x4>

08001966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001994:	f000 f8b4 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <SystemInit+0x64>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a6:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <SystemInit+0x64>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <SystemInit+0x68>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <SystemInit+0x68>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <SystemInit+0x68>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <SystemInit+0x68>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <SystemInit+0x68>)
 80019c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <SystemInit+0x68>)
 80019d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <SystemInit+0x68>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <SystemInit+0x68>)
 80019e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <SystemInit+0x68>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SystemInit+0x64>)
 80019ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019f2:	609a      	str	r2, [r3, #8]
#endif
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	40021000 	.word	0x40021000

08001a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a0e:	e003      	b.n	8001a18 <LoopCopyDataInit>

08001a10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a16:	3104      	adds	r1, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a18:	480b      	ldr	r0, [pc, #44]	; (8001a48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a20:	d3f6      	bcc.n	8001a10 <CopyDataInit>
	ldr	r2, =_sbss
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a24:	e002      	b.n	8001a2c <LoopFillZerobss>

08001a26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a28:	f842 3b04 	str.w	r3, [r2], #4

08001a2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <LoopForever+0x16>)
	cmp	r2, r3
 8001a2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a30:	d3f9      	bcc.n	8001a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a32:	f7ff ffb3 	bl	800199c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a36:	f003 ff37 	bl	80058a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3a:	f7fe fd57 	bl	80004ec <main>

08001a3e <LoopForever>:

LoopForever:
    b LoopForever
 8001a3e:	e7fe      	b.n	8001a3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a40:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8001a44:	08005970 	.word	0x08005970
	ldr	r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a4c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001a50:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001a54:	200005c4 	.word	0x200005c4

08001a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC1_2_IRQHandler>

08001a5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f001 f975 	bl	8002d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f80e 	bl	8001a8c <HAL_InitTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	e001      	b.n	8001a80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a7c:	f7ff fb20 	bl	80010c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a80:	79fb      	ldrb	r3, [r7, #7]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_InitTick+0x68>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d022      	beq.n	8001ae6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_InitTick+0x6c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_InitTick+0x68>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 f974 	bl	8002da2 <HAL_SYSTICK_Config>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10f      	bne.n	8001ae0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b0f      	cmp	r3, #15
 8001ac4:	d809      	bhi.n	8001ada <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ace:	f001 f94c 	bl	8002d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_InitTick+0x70>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e007      	b.n	8001aea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e004      	b.n	8001aea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e001      	b.n	8001aea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000008 	.word	0x20000008
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000004 	.word	0x20000004

08001b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_IncTick+0x1c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_IncTick+0x20>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <HAL_IncTick+0x1c>)
 8001b10:	6013      	str	r3, [r2, #0]
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	200005c0 	.word	0x200005c0
 8001b20:	20000008 	.word	0x20000008

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	200005c0 	.word	0x200005c0

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d004      	beq.n	8001b60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_Delay+0x40>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b60:	bf00      	nop
 8001b62:	f7ff ffdf 	bl	8001b24 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d8f7      	bhi.n	8001b62 <HAL_Delay+0x26>
  {
  }
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000008 	.word	0x20000008

08001b80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	609a      	str	r2, [r3, #8]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001be8:	b490      	push	{r4, r7}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3360      	adds	r3, #96	; 0x60
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <LL_ADC_SetOffset+0x40>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c1a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc90      	pop	{r4, r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	03fff000 	.word	0x03fff000

08001c2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c2c:	b490      	push	{r4, r7}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3360      	adds	r3, #96	; 0x60
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc90      	pop	{r4, r7}
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c54:	b490      	push	{r4, r7}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3360      	adds	r3, #96	; 0x60
 8001c64:	461a      	mov	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc90      	pop	{r4, r7}
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	615a      	str	r2, [r3, #20]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001caa:	b490      	push	{r4, r7}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3330      	adds	r3, #48	; 0x30
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	4413      	add	r3, r2
 8001cc8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	211f      	movs	r1, #31
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	0e9b      	lsrs	r3, r3, #26
 8001ce0:	f003 011f 	and.w	r1, r3, #31
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc90      	pop	{r4, r7}
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cfc:	b490      	push	{r4, r7}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3314      	adds	r3, #20
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	0e5b      	lsrs	r3, r3, #25
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001d1c:	6822      	ldr	r2, [r4, #0]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	0d1b      	lsrs	r3, r3, #20
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	2107      	movs	r1, #7
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	0d1b      	lsrs	r3, r3, #20
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc90      	pop	{r4, r7}
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	43db      	mvns	r3, r3
 8001d66:	401a      	ands	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0318 	and.w	r3, r3, #24
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d70:	40d9      	lsrs	r1, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	400b      	ands	r3, r1
 8001d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	0007ffff 	.word	0x0007ffff

08001d94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001da4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6093      	str	r3, [r2, #8]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dcc:	d101      	bne.n	8001dd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e1c:	d101      	bne.n	8001e22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <LL_ADC_IsEnabled+0x18>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <LL_ADC_IsEnabled+0x1a>
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d101      	bne.n	8001e6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d101      	bne.n	8001e94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e137      	b.n	800212e <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff f929 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff67 	bl	8001db8 <LL_ADC_IsDeepPowerDownEnabled>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff4d 	bl	8001d94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff82 	bl	8001e08 <LL_ADC_IsInternalRegulatorEnabled>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d113      	bne.n	8001f32 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff66 	bl	8001de0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f14:	4b88      	ldr	r3, [pc, #544]	; (8002138 <HAL_ADC_Init+0x294>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	4a88      	ldr	r2, [pc, #544]	; (800213c <HAL_ADC_Init+0x298>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f24:	e002      	b.n	8001f2c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f9      	bne.n	8001f26 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff66 	bl	8001e08 <LL_ADC_IsInternalRegulatorEnabled>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10d      	bne.n	8001f5e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f043 0210 	orr.w	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	f043 0201 	orr.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff77 	bl	8001e56 <LL_ADC_REG_IsConversionOngoing>
 8001f68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 80d2 	bne.w	800211c <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 80ce 	bne.w	800211c <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f88:	f043 0202 	orr.w	r2, r3, #2
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff4b 	bl	8001e30 <LL_ADC_IsEnabled>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d115      	bne.n	8001fcc <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fa0:	4867      	ldr	r0, [pc, #412]	; (8002140 <HAL_ADC_Init+0x29c>)
 8001fa2:	f7ff ff45 	bl	8001e30 <LL_ADC_IsEnabled>
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	4866      	ldr	r0, [pc, #408]	; (8002144 <HAL_ADC_Init+0x2a0>)
 8001faa:	f7ff ff41 	bl	8001e30 <LL_ADC_IsEnabled>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	431c      	orrs	r4, r3
 8001fb2:	4865      	ldr	r0, [pc, #404]	; (8002148 <HAL_ADC_Init+0x2a4>)
 8001fb4:	f7ff ff3c 	bl	8001e30 <LL_ADC_IsEnabled>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4323      	orrs	r3, r4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4861      	ldr	r0, [pc, #388]	; (800214c <HAL_ADC_Init+0x2a8>)
 8001fc8:	f7ff fdda 	bl	8001b80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7e5b      	ldrb	r3, [r3, #25]
 8001fd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fdc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fe2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d106      	bne.n	8002008 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	3b01      	subs	r3, #1
 8002000:	045b      	lsls	r3, r3, #17
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	4b49      	ldr	r3, [pc, #292]	; (8002150 <HAL_ADC_Init+0x2ac>)
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	69b9      	ldr	r1, [r7, #24]
 8002034:	430b      	orrs	r3, r1
 8002036:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff0a 	bl	8001e56 <LL_ADC_REG_IsConversionOngoing>
 8002042:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff17 	bl	8001e7c <LL_ADC_INJ_IsConversionOngoing>
 800204e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d140      	bne.n	80020d8 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d13d      	bne.n	80020d8 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7e1b      	ldrb	r3, [r3, #24]
 8002064:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002066:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800206e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800207e:	f023 0306 	bic.w	r3, r3, #6
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	69b9      	ldr	r1, [r7, #24]
 8002088:	430b      	orrs	r3, r1
 800208a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002092:	2b01      	cmp	r3, #1
 8002094:	d118      	bne.n	80020c8 <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020a0:	f023 0304 	bic.w	r3, r3, #4
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020ac:	4311      	orrs	r1, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020b2:	4311      	orrs	r1, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020b8:	430a      	orrs	r2, r1
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	611a      	str	r2, [r3, #16]
 80020c6:	e007      	b.n	80020d8 <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10c      	bne.n	80020fa <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f023 010f 	bic.w	r1, r3, #15
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	1e5a      	subs	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
 80020f8:	e007      	b.n	800210a <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 020f 	bic.w	r2, r2, #15
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	659a      	str	r2, [r3, #88]	; 0x58
 800211a:	e007      	b.n	800212c <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	f043 0210 	orr.w	r2, r3, #16
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800212c:	7ffb      	ldrb	r3, [r7, #31]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3724      	adds	r7, #36	; 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd90      	pop	{r4, r7, pc}
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000
 800213c:	053e2d63 	.word	0x053e2d63
 8002140:	50040000 	.word	0x50040000
 8002144:	50040100 	.word	0x50040100
 8002148:	50040200 	.word	0x50040200
 800214c:	50040300 	.word	0x50040300
 8002150:	fff0c007 	.word	0xfff0c007

08002154 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b0a6      	sub	sp, #152	; 0x98
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x22>
 8002172:	2302      	movs	r3, #2
 8002174:	e364      	b.n	8002840 <HAL_ADC_ConfigChannel+0x6ec>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fe67 	bl	8001e56 <LL_ADC_REG_IsConversionOngoing>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 8345 	bne.w	800281a <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b05      	cmp	r3, #5
 8002196:	d824      	bhi.n	80021e2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	3b02      	subs	r3, #2
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d81b      	bhi.n	80021da <HAL_ADC_ConfigChannel+0x86>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <HAL_ADC_ConfigChannel+0x54>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021c1 	.word	0x080021c1
 80021b0:	080021c9 	.word	0x080021c9
 80021b4:	080021d1 	.word	0x080021d1
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	220c      	movs	r2, #12
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	e011      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2212      	movs	r2, #18
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	e00d      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2218      	movs	r2, #24
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	e009      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	e004      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2206      	movs	r2, #6
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	e000      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80021e2:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	f7ff fd5a 	bl	8001caa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fe2b 	bl	8001e56 <LL_ADC_REG_IsConversionOngoing>
 8002200:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fe37 	bl	8001e7c <LL_ADC_INJ_IsConversionOngoing>
 800220e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002212:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8163 	bne.w	80024e2 <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800221c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 815e 	bne.w	80024e2 <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800222e:	d10f      	bne.n	8002250 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2200      	movs	r2, #0
 800223a:	4619      	mov	r1, r3
 800223c:	f7ff fd5e 	bl	8001cfc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fd1b 	bl	8001c84 <LL_ADC_SetSamplingTimeCommonConfig>
 800224e:	e00e      	b.n	800226e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6819      	ldr	r1, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	461a      	mov	r2, r3
 800225e:	f7ff fd4d 	bl	8001cfc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fd0b 	bl	8001c84 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	08db      	lsrs	r3, r3, #3
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d00a      	beq.n	80022a6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6919      	ldr	r1, [r3, #16]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022a0:	f7ff fca2 	bl	8001be8 <LL_ADC_SetOffset>
 80022a4:	e11d      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fcbd 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10a      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x17e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fcb2 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	0e9b      	lsrs	r3, r3, #26
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	e012      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x1a4>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fca7 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1bc>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	e00a      	b.n	8002326 <HAL_ADC_ConfigChannel+0x1d2>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800231e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	429a      	cmp	r2, r3
 8002328:	d106      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fc8e 	bl	8001c54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fc74 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10a      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x210>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fc69 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	f003 021f 	and.w	r2, r3, #31
 8002362:	e010      	b.n	8002386 <HAL_ADC_ConfigChannel+0x232>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2101      	movs	r1, #1
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fc5e 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800237c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_ConfigChannel+0x24a>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	e00a      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x260>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80023ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d106      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2200      	movs	r2, #0
 80023be:	2101      	movs	r1, #1
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fc47 	bl	8001c54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2102      	movs	r1, #2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fc2d 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x29e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2102      	movs	r1, #2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fc22 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	0e9b      	lsrs	r3, r3, #26
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	e010      	b.n	8002414 <HAL_ADC_ConfigChannel+0x2c0>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2102      	movs	r1, #2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fc17 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800240a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d105      	bne.n	800242c <HAL_ADC_ConfigChannel+0x2d8>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	e00a      	b.n	8002442 <HAL_ADC_ConfigChannel+0x2ee>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800243a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	429a      	cmp	r2, r3
 8002444:	d106      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2200      	movs	r2, #0
 800244c:	2102      	movs	r1, #2
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fc00 	bl	8001c54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2103      	movs	r1, #3
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fbe6 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x32c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2103      	movs	r1, #3
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fbdb 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 021f 	and.w	r2, r3, #31
 800247e:	e010      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x34e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2103      	movs	r1, #3
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fbd0 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x366>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0e9b      	lsrs	r3, r3, #26
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	e00a      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x37c>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80024c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d106      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	2103      	movs	r1, #3
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fbb9 	bl	8001c54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fca2 	bl	8001e30 <LL_ADC_IsEnabled>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 810c 	bne.w	800270c <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	461a      	mov	r2, r3
 8002502:	f7ff fc23 	bl	8001d4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	4aae      	ldr	r2, [pc, #696]	; (80027c4 <HAL_ADC_ConfigChannel+0x670>)
 800250c:	4293      	cmp	r3, r2
 800250e:	f040 80fd 	bne.w	800270c <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10b      	bne.n	800253a <HAL_ADC_ConfigChannel+0x3e6>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	0e9b      	lsrs	r3, r3, #26
 8002528:	3301      	adds	r3, #1
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2b09      	cmp	r3, #9
 8002530:	bf94      	ite	ls
 8002532:	2301      	movls	r3, #1
 8002534:	2300      	movhi	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	e012      	b.n	8002560 <HAL_ADC_ConfigChannel+0x40c>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3301      	adds	r3, #1
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2b09      	cmp	r3, #9
 8002558:	bf94      	ite	ls
 800255a:	2301      	movls	r3, #1
 800255c:	2300      	movhi	r3, #0
 800255e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002560:	2b00      	cmp	r3, #0
 8002562:	d064      	beq.n	800262e <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256c:	2b00      	cmp	r3, #0
 800256e:	d107      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x42c>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	069b      	lsls	r3, r3, #26
 800257a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800257e:	e00e      	b.n	800259e <HAL_ADC_ConfigChannel+0x44a>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	069b      	lsls	r3, r3, #26
 800259a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_ADC_ConfigChannel+0x46a>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	e010      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x48c>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	2101      	movs	r1, #1
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	ea42 0103 	orr.w	r1, r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x4b2>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	0e9b      	lsrs	r3, r3, #26
 80025f6:	3301      	adds	r3, #1
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	051b      	lsls	r3, r3, #20
 8002604:	e011      	b.n	800262a <HAL_ADC_ConfigChannel+0x4d6>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3301      	adds	r3, #1
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262a:	430b      	orrs	r3, r1
 800262c:	e069      	b.n	8002702 <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002636:	2b00      	cmp	r3, #0
 8002638:	d107      	bne.n	800264a <HAL_ADC_ConfigChannel+0x4f6>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0e9b      	lsrs	r3, r3, #26
 8002640:	3301      	adds	r3, #1
 8002642:	069b      	lsls	r3, r3, #26
 8002644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002648:	e00e      	b.n	8002668 <HAL_ADC_ConfigChannel+0x514>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	61fb      	str	r3, [r7, #28]
  return result;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	069b      	lsls	r3, r3, #26
 8002664:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d109      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x534>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	3301      	adds	r3, #1
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2101      	movs	r1, #1
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	e010      	b.n	80026aa <HAL_ADC_ConfigChannel+0x556>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	617b      	str	r3, [r7, #20]
  return result;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2101      	movs	r1, #1
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	ea42 0103 	orr.w	r1, r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10d      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x582>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 021f 	and.w	r2, r3, #31
 80026c6:	4613      	mov	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4413      	add	r3, r2
 80026cc:	3b1e      	subs	r3, #30
 80026ce:	051b      	lsls	r3, r3, #20
 80026d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026d4:	e014      	b.n	8002700 <HAL_ADC_ConfigChannel+0x5ac>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	60fb      	str	r3, [r7, #12]
  return result;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	f003 021f 	and.w	r2, r3, #31
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	3b1e      	subs	r3, #30
 80026fa:	051b      	lsls	r3, r3, #20
 80026fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002700:	430b      	orrs	r3, r1
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	6892      	ldr	r2, [r2, #8]
 8002706:	4619      	mov	r1, r3
 8002708:	f7ff faf8 	bl	8001cfc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_ADC_ConfigChannel+0x674>)
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 808d 	beq.w	8002834 <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800271a:	482c      	ldr	r0, [pc, #176]	; (80027cc <HAL_ADC_ConfigChannel+0x678>)
 800271c:	f7ff fa56 	bl	8001bcc <LL_ADC_GetCommonPathInternalCh>
 8002720:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <HAL_ADC_ConfigChannel+0x67c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d12b      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x632>
 800272e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d125      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <HAL_ADC_ConfigChannel+0x680>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d004      	beq.n	800274e <HAL_ADC_ConfigChannel+0x5fa>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a23      	ldr	r2, [pc, #140]	; (80027d8 <HAL_ADC_ConfigChannel+0x684>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d16f      	bne.n	800282e <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800274e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002756:	4619      	mov	r1, r3
 8002758:	481c      	ldr	r0, [pc, #112]	; (80027cc <HAL_ADC_ConfigChannel+0x678>)
 800275a:	f7ff fa24 	bl	8001ba6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800275e:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <HAL_ADC_ConfigChannel+0x688>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	099b      	lsrs	r3, r3, #6
 8002764:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <HAL_ADC_ConfigChannel+0x68c>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	099a      	lsrs	r2, r3, #6
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002776:	e002      	b.n	800277e <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	3b01      	subs	r3, #1
 800277c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f9      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002784:	e053      	b.n	800282e <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a16      	ldr	r2, [pc, #88]	; (80027e4 <HAL_ADC_ConfigChannel+0x690>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d12b      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x694>
 8002790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d125      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <HAL_ADC_ConfigChannel+0x680>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0x65c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <HAL_ADC_ConfigChannel+0x684>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d140      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b8:	4619      	mov	r1, r3
 80027ba:	4804      	ldr	r0, [pc, #16]	; (80027cc <HAL_ADC_ConfigChannel+0x678>)
 80027bc:	f7ff f9f3 	bl	8001ba6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c0:	e037      	b.n	8002832 <HAL_ADC_ConfigChannel+0x6de>
 80027c2:	bf00      	nop
 80027c4:	407f0000 	.word	0x407f0000
 80027c8:	80080000 	.word	0x80080000
 80027cc:	50040300 	.word	0x50040300
 80027d0:	c7520000 	.word	0xc7520000
 80027d4:	50040000 	.word	0x50040000
 80027d8:	50040200 	.word	0x50040200
 80027dc:	20000000 	.word	0x20000000
 80027e0:	053e2d63 	.word	0x053e2d63
 80027e4:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a16      	ldr	r2, [pc, #88]	; (8002848 <HAL_ADC_ConfigChannel+0x6f4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d120      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d11a      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a12      	ldr	r2, [pc, #72]	; (800284c <HAL_ADC_ConfigChannel+0x6f8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d115      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800280c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002810:	4619      	mov	r1, r3
 8002812:	480f      	ldr	r0, [pc, #60]	; (8002850 <HAL_ADC_ConfigChannel+0x6fc>)
 8002814:	f7ff f9c7 	bl	8001ba6 <LL_ADC_SetCommonPathInternalCh>
 8002818:	e00c      	b.n	8002834 <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f043 0220 	orr.w	r2, r3, #32
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800282c:	e002      	b.n	8002834 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002832:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800283c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002840:	4618      	mov	r0, r3
 8002842:	3798      	adds	r7, #152	; 0x98
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	80000001 	.word	0x80000001
 800284c:	50040000 	.word	0x50040000
 8002850:	50040300 	.word	0x50040300

08002854 <LL_ADC_IsEnabled>:
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <LL_ADC_IsEnabled+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_ADC_IsEnabled+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_REG_IsConversionOngoing>:
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d101      	bne.n	8002892 <LL_ADC_REG_IsConversionOngoing+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b0a1      	sub	sp, #132	; 0x84
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e08f      	b.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a47      	ldr	r2, [pc, #284]	; (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d102      	bne.n	80028d6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80028d0:	4b46      	ldr	r3, [pc, #280]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	e001      	b.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f043 0220 	orr.w	r2, r3, #32
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e072      	b.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ffbd 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002900:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ffb7 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d154      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002914:	2b00      	cmp	r3, #0
 8002916:	d151      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002918:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800291a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d02c      	beq.n	800297e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002936:	035b      	lsls	r3, r3, #13
 8002938:	430b      	orrs	r3, r1
 800293a:	431a      	orrs	r2, r3
 800293c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800293e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002940:	4829      	ldr	r0, [pc, #164]	; (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002942:	f7ff ff87 	bl	8002854 <LL_ADC_IsEnabled>
 8002946:	4604      	mov	r4, r0
 8002948:	4828      	ldr	r0, [pc, #160]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800294a:	f7ff ff83 	bl	8002854 <LL_ADC_IsEnabled>
 800294e:	4603      	mov	r3, r0
 8002950:	431c      	orrs	r4, r3
 8002952:	4828      	ldr	r0, [pc, #160]	; (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002954:	f7ff ff7e 	bl	8002854 <LL_ADC_IsEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	4323      	orrs	r3, r4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d137      	bne.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002968:	f023 030f 	bic.w	r3, r3, #15
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	6811      	ldr	r1, [r2, #0]
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	6892      	ldr	r2, [r2, #8]
 8002974:	430a      	orrs	r2, r1
 8002976:	431a      	orrs	r2, r3
 8002978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800297a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800297c:	e028      	b.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800297e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002988:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800298a:	4817      	ldr	r0, [pc, #92]	; (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800298c:	f7ff ff62 	bl	8002854 <LL_ADC_IsEnabled>
 8002990:	4604      	mov	r4, r0
 8002992:	4816      	ldr	r0, [pc, #88]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002994:	f7ff ff5e 	bl	8002854 <LL_ADC_IsEnabled>
 8002998:	4603      	mov	r3, r0
 800299a:	431c      	orrs	r4, r3
 800299c:	4815      	ldr	r0, [pc, #84]	; (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800299e:	f7ff ff59 	bl	8002854 <LL_ADC_IsEnabled>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4323      	orrs	r3, r4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d112      	bne.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029b2:	f023 030f 	bic.w	r3, r3, #15
 80029b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029ba:	e009      	b.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80029ce:	e000      	b.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80029da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3784      	adds	r7, #132	; 0x84
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd90      	pop	{r4, r7, pc}
 80029e6:	bf00      	nop
 80029e8:	50040000 	.word	0x50040000
 80029ec:	50040100 	.word	0x50040100
 80029f0:	50040300 	.word	0x50040300
 80029f4:	50040200 	.word	0x50040200

080029f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0ed      	b.n	8002be6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe fbc4 	bl	80011a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0202 	bic.w	r2, r2, #2
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a2c:	f7ff f87a 	bl	8001b24 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a32:	e012      	b.n	8002a5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a34:	f7ff f876 	bl	8001b24 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b0a      	cmp	r3, #10
 8002a40:	d90b      	bls.n	8002a5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2205      	movs	r2, #5
 8002a52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0c5      	b.n	8002be6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e5      	bne.n	8002a34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a78:	f7ff f854 	bl	8001b24 <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a7e:	e012      	b.n	8002aa6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a80:	f7ff f850 	bl	8001b24 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b0a      	cmp	r3, #10
 8002a8c:	d90b      	bls.n	8002aa6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2205      	movs	r2, #5
 8002a9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e09f      	b.n	8002be6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0e5      	beq.n	8002a80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7e1b      	ldrb	r3, [r3, #24]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d108      	bne.n	8002ace <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e007      	b.n	8002ade <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7e5b      	ldrb	r3, [r3, #25]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d108      	bne.n	8002af8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e007      	b.n	8002b08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7e9b      	ldrb	r3, [r3, #26]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d108      	bne.n	8002b22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0220 	orr.w	r2, r2, #32
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e007      	b.n	8002b32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0220 	bic.w	r2, r2, #32
 8002b30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7edb      	ldrb	r3, [r3, #27]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d108      	bne.n	8002b4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0210 	bic.w	r2, r2, #16
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e007      	b.n	8002b5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0210 	orr.w	r2, r2, #16
 8002b5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	7f1b      	ldrb	r3, [r3, #28]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d108      	bne.n	8002b76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0208 	orr.w	r2, r2, #8
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e007      	b.n	8002b86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0208 	bic.w	r2, r2, #8
 8002b84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	7f5b      	ldrb	r3, [r3, #29]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d108      	bne.n	8002ba0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0204 	orr.w	r2, r2, #4
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	e007      	b.n	8002bb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	ea42 0103 	orr.w	r1, r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c22:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	60d3      	str	r3, [r2, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <__NVIC_GetPriorityGrouping+0x18>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	f003 0307 	and.w	r3, r3, #7
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	db0a      	blt.n	8002c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <__NVIC_SetPriority+0x4c>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	440b      	add	r3, r1
 8002c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c7c:	e00a      	b.n	8002c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4908      	ldr	r1, [pc, #32]	; (8002ca4 <__NVIC_SetPriority+0x50>)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	440b      	add	r3, r1
 8002c92:	761a      	strb	r2, [r3, #24]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f1c3 0307 	rsb	r3, r3, #7
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	bf28      	it	cs
 8002cc6:	2304      	movcs	r3, #4
 8002cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d902      	bls.n	8002cd8 <NVIC_EncodePriority+0x30>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3b03      	subs	r3, #3
 8002cd6:	e000      	b.n	8002cda <NVIC_EncodePriority+0x32>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	401a      	ands	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	43d9      	mvns	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	4313      	orrs	r3, r2
         );
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d20:	d301      	bcc.n	8002d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00f      	b.n	8002d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d26:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <SysTick_Config+0x40>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2e:	210f      	movs	r1, #15
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f7ff ff8e 	bl	8002c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <SysTick_Config+0x40>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <SysTick_Config+0x40>)
 8002d40:	2207      	movs	r2, #7
 8002d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	e000e010 	.word	0xe000e010

08002d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff47 	bl	8002bf0 <__NVIC_SetPriorityGrouping>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d7c:	f7ff ff5c 	bl	8002c38 <__NVIC_GetPriorityGrouping>
 8002d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	6978      	ldr	r0, [r7, #20]
 8002d88:	f7ff ff8e 	bl	8002ca8 <NVIC_EncodePriority>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff5d 	bl	8002c54 <__NVIC_SetPriority>
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff ffb0 	bl	8002d10 <SysTick_Config>
 8002db0:	4603      	mov	r3, r0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dca:	e166      	b.n	800309a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8158 	beq.w	8003094 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d00b      	beq.n	8002e04 <HAL_GPIO_Init+0x48>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d007      	beq.n	8002e04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002df8:	2b11      	cmp	r3, #17
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b12      	cmp	r3, #18
 8002e02:	d130      	bne.n	8002e66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	091b      	lsrs	r3, r3, #4
 8002e50:	f003 0201 	and.w	r2, r3, #1
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0xea>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b12      	cmp	r3, #18
 8002ea4:	d123      	bne.n	8002eee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3208      	adds	r2, #8
 8002eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	08da      	lsrs	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3208      	adds	r2, #8
 8002ee8:	6939      	ldr	r1, [r7, #16]
 8002eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0203 	and.w	r2, r3, #3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80b2 	beq.w	8003094 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f30:	4b61      	ldr	r3, [pc, #388]	; (80030b8 <HAL_GPIO_Init+0x2fc>)
 8002f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f34:	4a60      	ldr	r2, [pc, #384]	; (80030b8 <HAL_GPIO_Init+0x2fc>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6613      	str	r3, [r2, #96]	; 0x60
 8002f3c:	4b5e      	ldr	r3, [pc, #376]	; (80030b8 <HAL_GPIO_Init+0x2fc>)
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f48:	4a5c      	ldr	r2, [pc, #368]	; (80030bc <HAL_GPIO_Init+0x300>)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	220f      	movs	r2, #15
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f72:	d02b      	beq.n	8002fcc <HAL_GPIO_Init+0x210>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_GPIO_Init+0x304>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d025      	beq.n	8002fc8 <HAL_GPIO_Init+0x20c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a51      	ldr	r2, [pc, #324]	; (80030c4 <HAL_GPIO_Init+0x308>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d01f      	beq.n	8002fc4 <HAL_GPIO_Init+0x208>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a50      	ldr	r2, [pc, #320]	; (80030c8 <HAL_GPIO_Init+0x30c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d019      	beq.n	8002fc0 <HAL_GPIO_Init+0x204>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a4f      	ldr	r2, [pc, #316]	; (80030cc <HAL_GPIO_Init+0x310>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_GPIO_Init+0x200>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a4e      	ldr	r2, [pc, #312]	; (80030d0 <HAL_GPIO_Init+0x314>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_GPIO_Init+0x1fc>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a4d      	ldr	r2, [pc, #308]	; (80030d4 <HAL_GPIO_Init+0x318>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d007      	beq.n	8002fb4 <HAL_GPIO_Init+0x1f8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a4c      	ldr	r2, [pc, #304]	; (80030d8 <HAL_GPIO_Init+0x31c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_GPIO_Init+0x1f4>
 8002fac:	2307      	movs	r3, #7
 8002fae:	e00e      	b.n	8002fce <HAL_GPIO_Init+0x212>
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	e00c      	b.n	8002fce <HAL_GPIO_Init+0x212>
 8002fb4:	2306      	movs	r3, #6
 8002fb6:	e00a      	b.n	8002fce <HAL_GPIO_Init+0x212>
 8002fb8:	2305      	movs	r3, #5
 8002fba:	e008      	b.n	8002fce <HAL_GPIO_Init+0x212>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	e006      	b.n	8002fce <HAL_GPIO_Init+0x212>
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e004      	b.n	8002fce <HAL_GPIO_Init+0x212>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e002      	b.n	8002fce <HAL_GPIO_Init+0x212>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_GPIO_Init+0x212>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	f002 0203 	and.w	r2, r2, #3
 8002fd4:	0092      	lsls	r2, r2, #2
 8002fd6:	4093      	lsls	r3, r2
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fde:	4937      	ldr	r1, [pc, #220]	; (80030bc <HAL_GPIO_Init+0x300>)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fec:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_GPIO_Init+0x320>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003010:	4a32      	ldr	r2, [pc, #200]	; (80030dc <HAL_GPIO_Init+0x320>)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003016:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_GPIO_Init+0x320>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	43db      	mvns	r3, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800303a:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_GPIO_Init+0x320>)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003040:	4b26      	ldr	r3, [pc, #152]	; (80030dc <HAL_GPIO_Init+0x320>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_GPIO_Init+0x320>)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800306a:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <HAL_GPIO_Init+0x320>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	43db      	mvns	r3, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800308e:	4a13      	ldr	r2, [pc, #76]	; (80030dc <HAL_GPIO_Init+0x320>)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3301      	adds	r3, #1
 8003098:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f47f ae91 	bne.w	8002dcc <HAL_GPIO_Init+0x10>
  }
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40010000 	.word	0x40010000
 80030c0:	48000400 	.word	0x48000400
 80030c4:	48000800 	.word	0x48000800
 80030c8:	48000c00 	.word	0x48000c00
 80030cc:	48001000 	.word	0x48001000
 80030d0:	48001400 	.word	0x48001400
 80030d4:	48001800 	.word	0x48001800
 80030d8:	48001c00 	.word	0x48001c00
 80030dc:	40010400 	.word	0x40010400

080030e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
 80030ec:	4613      	mov	r3, r2
 80030ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f0:	787b      	ldrb	r3, [r7, #1]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030f6:	887a      	ldrh	r2, [r7, #2]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030fc:	e002      	b.n	8003104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	887b      	ldrh	r3, [r7, #2]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003128:	887a      	ldrh	r2, [r7, #2]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800312e:	e002      	b.n	8003136 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003130:	887a      	ldrh	r2, [r7, #2]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e081      	b.n	8003258 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7fe f8bf 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2224      	movs	r2, #36	; 0x24
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003192:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d107      	bne.n	80031bc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	e006      	b.n	80031ca <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d104      	bne.n	80031dc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	ea42 0103 	orr.w	r1, r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	021a      	lsls	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69d9      	ldr	r1, [r3, #28]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1a      	ldr	r2, [r3, #32]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b20      	cmp	r3, #32
 8003274:	d138      	bne.n	80032e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003280:	2302      	movs	r3, #2
 8003282:	e032      	b.n	80032ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	; 0x24
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b085      	sub	sp, #20
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b20      	cmp	r3, #32
 800330a:	d139      	bne.n	8003380 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003316:	2302      	movs	r3, #2
 8003318:	e033      	b.n	8003382 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2224      	movs	r2, #36	; 0x24
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003348:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_PWR_ConfigPVD+0xb8>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f023 020e 	bic.w	r2, r3, #14
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4928      	ldr	r1, [pc, #160]	; (8003448 <HAL_PWR_ConfigPVD+0xb8>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80033aa:	4b28      	ldr	r3, [pc, #160]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4a27      	ldr	r2, [pc, #156]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 80033b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b4:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a24      	ldr	r2, [pc, #144]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80033c2:	4b22      	ldr	r3, [pc, #136]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 80033c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033cc:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80033ce:	4b1f      	ldr	r3, [pc, #124]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	4a1e      	ldr	r2, [pc, #120]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 80033d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d8:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80033fe:	4b13      	ldr	r3, [pc, #76]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	4a0c      	ldr	r2, [pc, #48]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003420:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	4a06      	ldr	r2, [pc, #24]	; (800344c <HAL_PWR_ConfigPVD+0xbc>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003438:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40007000 	.word	0x40007000
 800344c:	40010400 	.word	0x40010400

08003450 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_PWR_EnablePVD+0x1c>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_PWR_EnablePVD+0x1c>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6053      	str	r3, [r2, #4]
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40007000 	.word	0x40007000

08003470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <HAL_PWREx_GetVoltageRange+0x18>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40007000 	.word	0x40007000

0800348c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349a:	d130      	bne.n	80034fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800349c:	4b23      	ldr	r3, [pc, #140]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a8:	d038      	beq.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034b2:	4a1e      	ldr	r2, [pc, #120]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2232      	movs	r2, #50	; 0x32
 80034c0:	fb02 f303 	mul.w	r3, r2, r3
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0c9b      	lsrs	r3, r3, #18
 80034cc:	3301      	adds	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d0:	e002      	b.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d8:	4b14      	ldr	r3, [pc, #80]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e4:	d102      	bne.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f2      	bne.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f8:	d110      	bne.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e00f      	b.n	800351e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350a:	d007      	beq.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003514:	4a05      	ldr	r2, [pc, #20]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40007000 	.word	0x40007000
 8003530:	20000000 	.word	0x20000000
 8003534:	431bde83 	.word	0x431bde83

08003538 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_PWREx_EnableVddIO2+0x1c>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a04      	ldr	r2, [pc, #16]	; (8003554 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003546:	6053      	str	r3, [r2, #4]
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40007000 	.word	0x40007000

08003558 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af02      	add	r7, sp, #8
 800355e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003560:	f7fe fae0 	bl	8001b24 <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e075      	b.n	800365c <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_QSPI_Init+0x28>
 800357c:	2302      	movs	r3, #2
 800357e:	e06d      	b.n	800365c <HAL_QSPI_Init+0x104>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7fd ff51 	bl	8001444 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80035a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f85e 	bl	8003668 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	021a      	lsls	r2, r3, #8
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2120      	movs	r1, #32
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f856 	bl	8003684 <QSPI_WaitFlagStateUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80035dc:	7afb      	ldrb	r3, [r7, #11]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d137      	bne.n	8003652 <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035ec:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6852      	ldr	r2, [r2, #4]
 80035f4:	0611      	lsls	r1, r2, #24
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68d2      	ldr	r2, [r2, #12]
 80035fa:	4311      	orrs	r1, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	69d2      	ldr	r2, [r2, #28]
 8003600:	4311      	orrs	r1, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6a12      	ldr	r2, [r2, #32]
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	430b      	orrs	r3, r1
 800360e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	4b13      	ldr	r3, [pc, #76]	; (8003664 <HAL_QSPI_Init+0x10c>)
 8003618:	4013      	ands	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6912      	ldr	r2, [r2, #16]
 800361e:	0411      	lsls	r1, r2, #16
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6952      	ldr	r2, [r2, #20]
 8003624:	4311      	orrs	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6992      	ldr	r2, [r2, #24]
 800362a:	4311      	orrs	r1, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	430b      	orrs	r3, r1
 8003632:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800365a:	7afb      	ldrb	r3, [r7, #11]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	ffe0f8fe 	.word	0xffe0f8fe

08003668 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003694:	e01a      	b.n	80036cc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d016      	beq.n	80036cc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	f7fe fa41 	bl	8001b24 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2204      	movs	r2, #4
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	f043 0201 	orr.w	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e00e      	b.n	80036ea <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bf14      	ite	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	2300      	moveq	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1d6      	bne.n	8003696 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f000 bc16 	b.w	8003f34 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003708:	4ba0      	ldr	r3, [pc, #640]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003712:	4b9e      	ldr	r3, [pc, #632]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80e4 	beq.w	80038f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_RCC_OscConfig+0x4c>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b0c      	cmp	r3, #12
 8003734:	f040 808b 	bne.w	800384e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b01      	cmp	r3, #1
 800373c:	f040 8087 	bne.w	800384e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003740:	4b92      	ldr	r3, [pc, #584]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_RCC_OscConfig+0x64>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e3ed      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1a      	ldr	r2, [r3, #32]
 800375c:	4b8b      	ldr	r3, [pc, #556]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <HAL_RCC_OscConfig+0x7e>
 8003768:	4b88      	ldr	r3, [pc, #544]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003770:	e005      	b.n	800377e <HAL_RCC_OscConfig+0x8a>
 8003772:	4b86      	ldr	r3, [pc, #536]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377e:	4293      	cmp	r3, r2
 8003780:	d223      	bcs.n	80037ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fd7e 	bl	8004288 <RCC_SetFlashLatencyFromMSIRange>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e3ce      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003796:	4b7d      	ldr	r3, [pc, #500]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a7c      	ldr	r2, [pc, #496]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800379c:	f043 0308 	orr.w	r3, r3, #8
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b7a      	ldr	r3, [pc, #488]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	4977      	ldr	r1, [pc, #476]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037b4:	4b75      	ldr	r3, [pc, #468]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	4972      	ldr	r1, [pc, #456]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
 80037c8:	e025      	b.n	8003816 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ca:	4b70      	ldr	r3, [pc, #448]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a6f      	ldr	r2, [pc, #444]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80037d0:	f043 0308 	orr.w	r3, r3, #8
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b6d      	ldr	r3, [pc, #436]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	496a      	ldr	r1, [pc, #424]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037e8:	4b68      	ldr	r3, [pc, #416]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	4965      	ldr	r1, [pc, #404]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fd3e 	bl	8004288 <RCC_SetFlashLatencyFromMSIRange>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e38e      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003816:	f000 fc75 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 800381a:	4601      	mov	r1, r0
 800381c:	4b5b      	ldr	r3, [pc, #364]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	4a5a      	ldr	r2, [pc, #360]	; (8003990 <HAL_RCC_OscConfig+0x29c>)
 8003828:	5cd3      	ldrb	r3, [r2, r3]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	fa21 f303 	lsr.w	r3, r1, r3
 8003832:	4a58      	ldr	r2, [pc, #352]	; (8003994 <HAL_RCC_OscConfig+0x2a0>)
 8003834:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003836:	4b58      	ldr	r3, [pc, #352]	; (8003998 <HAL_RCC_OscConfig+0x2a4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe f926 	bl	8001a8c <HAL_InitTick>
 8003840:	4603      	mov	r3, r0
 8003842:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d052      	beq.n	80038f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	e372      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d032      	beq.n	80038bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003856:	4b4d      	ldr	r3, [pc, #308]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a4c      	ldr	r2, [pc, #304]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003862:	f7fe f95f 	bl	8001b24 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800386a:	f7fe f95b 	bl	8001b24 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e35b      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800387c:	4b43      	ldr	r3, [pc, #268]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003888:	4b40      	ldr	r3, [pc, #256]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a3f      	ldr	r2, [pc, #252]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800388e:	f043 0308 	orr.w	r3, r3, #8
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	4b3d      	ldr	r3, [pc, #244]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	493a      	ldr	r1, [pc, #232]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a6:	4b39      	ldr	r3, [pc, #228]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	4935      	ldr	r1, [pc, #212]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	604b      	str	r3, [r1, #4]
 80038ba:	e01a      	b.n	80038f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038bc:	4b33      	ldr	r3, [pc, #204]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a32      	ldr	r2, [pc, #200]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038c8:	f7fe f92c 	bl	8001b24 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038d0:	f7fe f928 	bl	8001b24 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e328      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038e2:	4b2a      	ldr	r3, [pc, #168]	; (800398c <HAL_RCC_OscConfig+0x298>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x1dc>
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d073      	beq.n	80039e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d005      	beq.n	8003910 <HAL_RCC_OscConfig+0x21c>
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d10e      	bne.n	8003928 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d10b      	bne.n	8003928 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	4b1e      	ldr	r3, [pc, #120]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d063      	beq.n	80039e4 <HAL_RCC_OscConfig+0x2f0>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d15f      	bne.n	80039e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e305      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d106      	bne.n	8003940 <HAL_RCC_OscConfig+0x24c>
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a15      	ldr	r2, [pc, #84]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e01d      	b.n	800397c <HAL_RCC_OscConfig+0x288>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x270>
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a0f      	ldr	r2, [pc, #60]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a0c      	ldr	r2, [pc, #48]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0x288>
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a08      	ldr	r2, [pc, #32]	; (800398c <HAL_RCC_OscConfig+0x298>)
 800396a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a05      	ldr	r2, [pc, #20]	; (800398c <HAL_RCC_OscConfig+0x298>)
 8003976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01b      	beq.n	80039bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe f8ce 	bl	8001b24 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398a:	e010      	b.n	80039ae <HAL_RCC_OscConfig+0x2ba>
 800398c:	40021000 	.word	0x40021000
 8003990:	08005918 	.word	0x08005918
 8003994:	20000000 	.word	0x20000000
 8003998:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7fe f8c2 	bl	8001b24 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e2c2      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ae:	4baf      	ldr	r3, [pc, #700]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x2a8>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fe f8b2 	bl	8001b24 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c4:	f7fe f8ae 	bl	8001b24 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e2ae      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039d6:	4ba5      	ldr	r3, [pc, #660]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x2d0>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d060      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_OscConfig+0x310>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d119      	bne.n	8003a32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d116      	bne.n	8003a32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a04:	4b99      	ldr	r3, [pc, #612]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_OscConfig+0x328>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e28b      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b93      	ldr	r3, [pc, #588]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	4990      	ldr	r1, [pc, #576]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a30:	e040      	b.n	8003ab4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d023      	beq.n	8003a82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3a:	4b8c      	ldr	r3, [pc, #560]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a8b      	ldr	r2, [pc, #556]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fe f86d 	bl	8001b24 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4e:	f7fe f869 	bl	8001b24 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e269      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a60:	4b82      	ldr	r3, [pc, #520]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6c:	4b7f      	ldr	r3, [pc, #508]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	061b      	lsls	r3, r3, #24
 8003a7a:	497c      	ldr	r1, [pc, #496]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
 8003a80:	e018      	b.n	8003ab4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a82:	4b7a      	ldr	r3, [pc, #488]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a79      	ldr	r2, [pc, #484]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fe f849 	bl	8001b24 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fe f845 	bl	8001b24 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e245      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa8:	4b70      	ldr	r3, [pc, #448]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f0      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d03c      	beq.n	8003b3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01c      	beq.n	8003b02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac8:	4b68      	ldr	r3, [pc, #416]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ace:	4a67      	ldr	r2, [pc, #412]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fe f824 	bl	8001b24 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7fe f820 	bl	8001b24 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e220      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003af2:	4b5e      	ldr	r3, [pc, #376]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ef      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x3ec>
 8003b00:	e01b      	b.n	8003b3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b02:	4b5a      	ldr	r3, [pc, #360]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b08:	4a58      	ldr	r2, [pc, #352]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b12:	f7fe f807 	bl	8001b24 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7fe f803 	bl	8001b24 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e203      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b2c:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1ef      	bne.n	8003b1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80a6 	beq.w	8003c94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b4c:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10d      	bne.n	8003b74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b58:	4b44      	ldr	r3, [pc, #272]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	4a43      	ldr	r2, [pc, #268]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b62:	6593      	str	r3, [r2, #88]	; 0x58
 8003b64:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b70:	2301      	movs	r3, #1
 8003b72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b74:	4b3e      	ldr	r3, [pc, #248]	; (8003c70 <HAL_RCC_OscConfig+0x57c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d118      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b80:	4b3b      	ldr	r3, [pc, #236]	; (8003c70 <HAL_RCC_OscConfig+0x57c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a3a      	ldr	r2, [pc, #232]	; (8003c70 <HAL_RCC_OscConfig+0x57c>)
 8003b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8c:	f7fd ffca 	bl	8001b24 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b94:	f7fd ffc6 	bl	8001b24 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e1c6      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba6:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <HAL_RCC_OscConfig+0x57c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d108      	bne.n	8003bcc <HAL_RCC_OscConfig+0x4d8>
 8003bba:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bca:	e024      	b.n	8003c16 <HAL_RCC_OscConfig+0x522>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b05      	cmp	r3, #5
 8003bd2:	d110      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x502>
 8003bd4:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	4a24      	ldr	r2, [pc, #144]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003bdc:	f043 0304 	orr.w	r3, r3, #4
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be4:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bf4:	e00f      	b.n	8003c16 <HAL_RCC_OscConfig+0x522>
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c06:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003c0e:	f023 0304 	bic.w	r3, r3, #4
 8003c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1e:	f7fd ff81 	bl	8001b24 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c24:	e00a      	b.n	8003c3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c26:	f7fd ff7d 	bl	8001b24 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e17b      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_OscConfig+0x578>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ed      	beq.n	8003c26 <HAL_RCC_OscConfig+0x532>
 8003c4a:	e01a      	b.n	8003c82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fd ff6a 	bl	8001b24 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c52:	e00f      	b.n	8003c74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7fd ff66 	bl	8001b24 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d906      	bls.n	8003c74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e164      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c74:	4ba8      	ldr	r3, [pc, #672]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e8      	bne.n	8003c54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c82:	7ffb      	ldrb	r3, [r7, #31]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4ba3      	ldr	r3, [pc, #652]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	4aa2      	ldr	r2, [pc, #648]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d03c      	beq.n	8003d1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01c      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ca8:	4b9b      	ldr	r3, [pc, #620]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cae:	4a9a      	ldr	r2, [pc, #616]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fd ff34 	bl	8001b24 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cc0:	f7fd ff30 	bl	8001b24 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e130      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cd2:	4b91      	ldr	r3, [pc, #580]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ef      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x5cc>
 8003ce0:	e01b      	b.n	8003d1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ce2:	4b8d      	ldr	r3, [pc, #564]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ce8:	4a8b      	ldr	r2, [pc, #556]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf2:	f7fd ff17 	bl	8001b24 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cfa:	f7fd ff13 	bl	8001b24 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e113      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d0c:	4b82      	ldr	r3, [pc, #520]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ef      	bne.n	8003cfa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8107 	beq.w	8003f32 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	f040 80cb 	bne.w	8003ec4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d2e:	4b7a      	ldr	r3, [pc, #488]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 0203 	and.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d12c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d123      	bne.n	8003d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d11b      	bne.n	8003d9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d113      	bne.n	8003d9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d109      	bne.n	8003d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	3b01      	subs	r3, #1
 8003d96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d06d      	beq.n	8003e78 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d068      	beq.n	8003e74 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003da2:	4b5d      	ldr	r3, [pc, #372]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d105      	bne.n	8003dba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003dae:	4b5a      	ldr	r3, [pc, #360]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e0ba      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dbe:	4b56      	ldr	r3, [pc, #344]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a55      	ldr	r2, [pc, #340]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dca:	f7fd feab 	bl	8001b24 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fd fea7 	bl	8001b24 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0a7      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	4b4c      	ldr	r3, [pc, #304]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df0:	4b49      	ldr	r3, [pc, #292]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	4b49      	ldr	r3, [pc, #292]	; (8003f1c <HAL_RCC_OscConfig+0x828>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e00:	3a01      	subs	r2, #1
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	4311      	orrs	r1, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e0a:	0212      	lsls	r2, r2, #8
 8003e0c:	4311      	orrs	r1, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e12:	0852      	lsrs	r2, r2, #1
 8003e14:	3a01      	subs	r2, #1
 8003e16:	0552      	lsls	r2, r2, #21
 8003e18:	4311      	orrs	r1, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e1e:	0852      	lsrs	r2, r2, #1
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0652      	lsls	r2, r2, #25
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e2a:	06d2      	lsls	r2, r2, #27
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	493a      	ldr	r1, [pc, #232]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e34:	4b38      	ldr	r3, [pc, #224]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a37      	ldr	r2, [pc, #220]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e40:	4b35      	ldr	r3, [pc, #212]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a34      	ldr	r2, [pc, #208]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e4c:	f7fd fe6a 	bl	8001b24 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd fe66 	bl	8001b24 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e066      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e66:	4b2c      	ldr	r3, [pc, #176]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e72:	e05e      	b.n	8003f32 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e05d      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e78:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d156      	bne.n	8003f32 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e84:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a23      	ldr	r2, [pc, #140]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e90:	4b21      	ldr	r3, [pc, #132]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a20      	ldr	r2, [pc, #128]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e9c:	f7fd fe42 	bl	8001b24 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fd fe3e 	bl	8001b24 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e03e      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb6:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x7b0>
 8003ec2:	e036      	b.n	8003f32 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b0c      	cmp	r3, #12
 8003ec8:	d031      	beq.n	8003f2e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eca:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003ee8:	f023 0303 	bic.w	r3, r3, #3
 8003eec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <HAL_RCC_OscConfig+0x824>)
 8003ef4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fd fe11 	bl	8001b24 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f04:	e00c      	b.n	8003f20 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fd fe0d 	bl	8001b24 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d905      	bls.n	8003f20 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e00d      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_RCC_OscConfig+0x848>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ec      	bne.n	8003f06 <HAL_RCC_OscConfig+0x812>
 8003f2c:	e001      	b.n	8003f32 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000

08003f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0c8      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f54:	4b66      	ldr	r3, [pc, #408]	; (80040f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d910      	bls.n	8003f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b63      	ldr	r3, [pc, #396]	; (80040f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 0207 	bic.w	r2, r3, #7
 8003f6a:	4961      	ldr	r1, [pc, #388]	; (80040f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0b0      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d04c      	beq.n	800402a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f98:	4b56      	ldr	r3, [pc, #344]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d121      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e09e      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d107      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fb0:	4b50      	ldr	r3, [pc, #320]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d115      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e092      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fc8:	4b4a      	ldr	r3, [pc, #296]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d109      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e086      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd8:	4b46      	ldr	r3, [pc, #280]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e07e      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fe8:	4b42      	ldr	r3, [pc, #264]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 0203 	bic.w	r2, r3, #3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	493f      	ldr	r1, [pc, #252]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffa:	f7fd fd93 	bl	8001b24 <HAL_GetTick>
 8003ffe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004000:	e00a      	b.n	8004018 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004002:	f7fd fd8f 	bl	8001b24 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e066      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004018:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 020c 	and.w	r2, r3, #12
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	429a      	cmp	r2, r3
 8004028:	d1eb      	bne.n	8004002 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004036:	4b2f      	ldr	r3, [pc, #188]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	492c      	ldr	r1, [pc, #176]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004048:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <HAL_RCC_ClockConfig+0x1b0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d210      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <HAL_RCC_ClockConfig+0x1b0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 0207 	bic.w	r2, r3, #7
 800405e:	4924      	ldr	r1, [pc, #144]	; (80040f0 <HAL_RCC_ClockConfig+0x1b0>)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004066:	4b22      	ldr	r3, [pc, #136]	; (80040f0 <HAL_RCC_ClockConfig+0x1b0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e036      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4918      	ldr	r1, [pc, #96]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4910      	ldr	r1, [pc, #64]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040b6:	f000 f825 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80040ba:	4601      	mov	r1, r0
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <HAL_RCC_ClockConfig+0x1b4>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	4a0c      	ldr	r2, [pc, #48]	; (80040f8 <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	fa21 f303 	lsr.w	r3, r1, r3
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd fcd6 	bl	8001a8c <HAL_InitTick>
 80040e0:	4603      	mov	r3, r0
 80040e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80040e4:	7afb      	ldrb	r3, [r7, #11]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40022000 	.word	0x40022000
 80040f4:	40021000 	.word	0x40021000
 80040f8:	08005918 	.word	0x08005918
 80040fc:	20000000 	.word	0x20000000
 8004100:	20000004 	.word	0x20000004

08004104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	; 0x24
 8004108:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004112:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <HAL_RCC_GetSysClockFreq+0x104>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800411c:	4b3a      	ldr	r3, [pc, #232]	; (8004208 <HAL_RCC_GetSysClockFreq+0x104>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x34>
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d121      	bne.n	8004176 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d11e      	bne.n	8004176 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004138:	4b33      	ldr	r3, [pc, #204]	; (8004208 <HAL_RCC_GetSysClockFreq+0x104>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d107      	bne.n	8004154 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004144:	4b30      	ldr	r3, [pc, #192]	; (8004208 <HAL_RCC_GetSysClockFreq+0x104>)
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414a:	0a1b      	lsrs	r3, r3, #8
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	e005      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004154:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <HAL_RCC_GetSysClockFreq+0x104>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <HAL_RCC_GetSysClockFreq+0x108>)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004168:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10d      	bne.n	800418c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004174:	e00a      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d102      	bne.n	8004182 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800417c:	4b24      	ldr	r3, [pc, #144]	; (8004210 <HAL_RCC_GetSysClockFreq+0x10c>)
 800417e:	61bb      	str	r3, [r7, #24]
 8004180:	e004      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d101      	bne.n	800418c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004188:	4b22      	ldr	r3, [pc, #136]	; (8004214 <HAL_RCC_GetSysClockFreq+0x110>)
 800418a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b0c      	cmp	r3, #12
 8004190:	d133      	bne.n	80041fa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCC_GetSysClockFreq+0x104>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d002      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0xa4>
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d003      	beq.n	80041ae <HAL_RCC_GetSysClockFreq+0xaa>
 80041a6:	e005      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041aa:	617b      	str	r3, [r7, #20]
      break;
 80041ac:	e005      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041ae:	4b19      	ldr	r3, [pc, #100]	; (8004214 <HAL_RCC_GetSysClockFreq+0x110>)
 80041b0:	617b      	str	r3, [r7, #20]
      break;
 80041b2:	e002      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	617b      	str	r3, [r7, #20]
      break;
 80041b8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <HAL_RCC_GetSysClockFreq+0x104>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	3301      	adds	r3, #1
 80041c6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_RCC_GetSysClockFreq+0x104>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	0a1b      	lsrs	r3, r3, #8
 80041ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	fb02 f203 	mul.w	r2, r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_GetSysClockFreq+0x104>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	0e5b      	lsrs	r3, r3, #25
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	3301      	adds	r3, #1
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041fa:	69bb      	ldr	r3, [r7, #24]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3724      	adds	r7, #36	; 0x24
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40021000 	.word	0x40021000
 800420c:	08005930 	.word	0x08005930
 8004210:	00f42400 	.word	0x00f42400
 8004214:	018cba80 	.word	0x018cba80

08004218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_RCC_GetHCLKFreq+0x14>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000000 	.word	0x20000000

08004230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004234:	f7ff fff0 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004238:	4601      	mov	r1, r0
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	4a04      	ldr	r2, [pc, #16]	; (8004258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004246:	5cd3      	ldrb	r3, [r2, r3]
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000
 8004258:	08005928 	.word	0x08005928

0800425c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004260:	f7ff ffda 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004264:	4601      	mov	r1, r0
 8004266:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	0adb      	lsrs	r3, r3, #11
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004272:	5cd3      	ldrb	r3, [r2, r3]
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	fa21 f303 	lsr.w	r3, r1, r3
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000
 8004284:	08005928 	.word	0x08005928

08004288 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042a0:	f7ff f8e6 	bl	8003470 <HAL_PWREx_GetVoltageRange>
 80042a4:	6178      	str	r0, [r7, #20]
 80042a6:	e014      	b.n	80042d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042a8:	4b25      	ldr	r3, [pc, #148]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	4a24      	ldr	r2, [pc, #144]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b2:	6593      	str	r3, [r2, #88]	; 0x58
 80042b4:	4b22      	ldr	r3, [pc, #136]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042c0:	f7ff f8d6 	bl	8003470 <HAL_PWREx_GetVoltageRange>
 80042c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042c6:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d8:	d10b      	bne.n	80042f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b80      	cmp	r3, #128	; 0x80
 80042de:	d919      	bls.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2ba0      	cmp	r3, #160	; 0xa0
 80042e4:	d902      	bls.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042e6:	2302      	movs	r3, #2
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	e013      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042ec:	2301      	movs	r3, #1
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	e010      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b80      	cmp	r3, #128	; 0x80
 80042f6:	d902      	bls.n	80042fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042f8:	2303      	movs	r3, #3
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	e00a      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b80      	cmp	r3, #128	; 0x80
 8004302:	d102      	bne.n	800430a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004304:	2302      	movs	r3, #2
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	e004      	b.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b70      	cmp	r3, #112	; 0x70
 800430e:	d101      	bne.n	8004314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004310:	2301      	movs	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 0207 	bic.w	r2, r3, #7
 800431c:	4909      	ldr	r1, [pc, #36]	; (8004344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	429a      	cmp	r2, r3
 8004330:	d001      	beq.n	8004336 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	40022000 	.word	0x40022000

08004348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004350:	2300      	movs	r3, #0
 8004352:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004354:	2300      	movs	r3, #0
 8004356:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004360:	2b00      	cmp	r3, #0
 8004362:	d03f      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436c:	d01c      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800436e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004372:	d802      	bhi.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004378:	e01f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x72>
 800437a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800437e:	d003      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004380:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004384:	d01c      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004386:	e018      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004388:	4b85      	ldr	r3, [pc, #532]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a84      	ldr	r2, [pc, #528]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800438e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004392:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004394:	e015      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3304      	adds	r3, #4
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fb0d 	bl	80049bc <RCCEx_PLLSAI1_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043a6:	e00c      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3320      	adds	r3, #32
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fbf4 	bl	8004b9c <RCCEx_PLLSAI2_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043b8:	e003      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	74fb      	strb	r3, [r7, #19]
      break;
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80043c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c2:	7cfb      	ldrb	r3, [r7, #19]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043c8:	4b75      	ldr	r3, [pc, #468]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043d6:	4972      	ldr	r1, [pc, #456]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043de:	e001      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d03f      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f8:	d01c      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043fe:	d802      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00e      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004404:	e01f      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800440a:	d003      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800440c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004410:	d01c      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004412:	e018      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004414:	4b62      	ldr	r3, [pc, #392]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a61      	ldr	r2, [pc, #388]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800441a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004420:	e015      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fac7 	bl	80049bc <RCCEx_PLLSAI1_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004432:	e00c      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3320      	adds	r3, #32
 8004438:	2100      	movs	r1, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fbae 	bl	8004b9c <RCCEx_PLLSAI2_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004444:	e003      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	74fb      	strb	r3, [r7, #19]
      break;
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800444c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444e:	7cfb      	ldrb	r3, [r7, #19]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004454:	4b52      	ldr	r3, [pc, #328]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004462:	494f      	ldr	r1, [pc, #316]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800446a:	e001      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80a0 	beq.w	80045be <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447e:	2300      	movs	r3, #0
 8004480:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00d      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800449a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449c:	4a40      	ldr	r2, [pc, #256]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a2:	6593      	str	r3, [r2, #88]	; 0x58
 80044a4:	4b3e      	ldr	r3, [pc, #248]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b0:	2301      	movs	r3, #1
 80044b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044b4:	4b3b      	ldr	r3, [pc, #236]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a3a      	ldr	r2, [pc, #232]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044c0:	f7fd fb30 	bl	8001b24 <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c6:	e009      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c8:	f7fd fb2c 	bl	8001b24 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d902      	bls.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	74fb      	strb	r3, [r7, #19]
        break;
 80044da:	e005      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044dc:	4b31      	ldr	r3, [pc, #196]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ef      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d15c      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044ee:	4b2c      	ldr	r3, [pc, #176]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01f      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	429a      	cmp	r2, r3
 800450a:	d019      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800450c:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004516:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004518:	4b21      	ldr	r3, [pc, #132]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004528:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	4a1c      	ldr	r2, [pc, #112]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004538:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d016      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7fd faeb 	bl	8001b24 <HAL_GetTick>
 800454e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004550:	e00b      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fd fae7 	bl	8001b24 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004560:	4293      	cmp	r3, r2
 8004562:	d902      	bls.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	74fb      	strb	r3, [r7, #19]
            break;
 8004568:	e006      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800456a:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ec      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10c      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	4904      	ldr	r1, [pc, #16]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004596:	e009      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
 800459c:	e006      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x264>
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ac:	7c7b      	ldrb	r3, [r7, #17]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b2:	4ba6      	ldr	r3, [pc, #664]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	4aa5      	ldr	r2, [pc, #660]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ca:	4ba0      	ldr	r3, [pc, #640]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	f023 0203 	bic.w	r2, r3, #3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	499c      	ldr	r1, [pc, #624]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045ec:	4b97      	ldr	r3, [pc, #604]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f023 020c 	bic.w	r2, r3, #12
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	4994      	ldr	r1, [pc, #592]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800460e:	4b8f      	ldr	r3, [pc, #572]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	498b      	ldr	r1, [pc, #556]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004630:	4b86      	ldr	r3, [pc, #536]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	4983      	ldr	r1, [pc, #524]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004652:	4b7e      	ldr	r3, [pc, #504]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004660:	497a      	ldr	r1, [pc, #488]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004674:	4b75      	ldr	r3, [pc, #468]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	4972      	ldr	r1, [pc, #456]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004696:	4b6d      	ldr	r3, [pc, #436]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a4:	4969      	ldr	r1, [pc, #420]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046b8:	4b64      	ldr	r3, [pc, #400]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c6:	4961      	ldr	r1, [pc, #388]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046da:	4b5c      	ldr	r3, [pc, #368]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e8:	4958      	ldr	r1, [pc, #352]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046fc:	4b53      	ldr	r3, [pc, #332]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	4950      	ldr	r1, [pc, #320]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800471e:	4b4b      	ldr	r3, [pc, #300]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	4947      	ldr	r1, [pc, #284]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004740:	4b42      	ldr	r3, [pc, #264]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004746:	f023 0203 	bic.w	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	493f      	ldr	r1, [pc, #252]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d028      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004762:	4b3a      	ldr	r3, [pc, #232]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	4936      	ldr	r1, [pc, #216]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004780:	d106      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004782:	4b32      	ldr	r3, [pc, #200]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	4a31      	ldr	r2, [pc, #196]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800478c:	60d3      	str	r3, [r2, #12]
 800478e:	e011      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3304      	adds	r3, #4
 800479e:	2101      	movs	r1, #1
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f90b 	bl	80049bc <RCCEx_PLLSAI1_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d028      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047c0:	4b22      	ldr	r3, [pc, #136]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ce:	491f      	ldr	r1, [pc, #124]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047de:	d106      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e0:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a19      	ldr	r2, [pc, #100]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ea:	60d3      	str	r3, [r2, #12]
 80047ec:	e011      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047f6:	d10c      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3304      	adds	r3, #4
 80047fc:	2101      	movs	r1, #1
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f8dc 	bl	80049bc <RCCEx_PLLSAI1_Config>
 8004804:	4603      	mov	r3, r0
 8004806:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 800480e:	7cfb      	ldrb	r3, [r7, #19]
 8004810:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d02a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800481e:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800482c:	4907      	ldr	r1, [pc, #28]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800483c:	d108      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800483e:	4b03      	ldr	r3, [pc, #12]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	4a02      	ldr	r2, [pc, #8]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004848:	60d3      	str	r3, [r2, #12]
 800484a:	e013      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800484c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004858:	d10c      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	2101      	movs	r1, #1
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f8ab 	bl	80049bc <RCCEx_PLLSAI1_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800486a:	7cfb      	ldrb	r3, [r7, #19]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02f      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004880:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488e:	4929      	ldr	r1, [pc, #164]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800489a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800489e:	d10d      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	2102      	movs	r1, #2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f888 	bl	80049bc <RCCEx_PLLSAI1_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d014      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80048b6:	7cfb      	ldrb	r3, [r7, #19]
 80048b8:	74bb      	strb	r3, [r7, #18]
 80048ba:	e011      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3320      	adds	r3, #32
 80048ca:	2102      	movs	r1, #2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 f965 	bl	8004b9c <RCCEx_PLLSAI2_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048d6:	7cfb      	ldrb	r3, [r7, #19]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048fc:	490d      	ldr	r1, [pc, #52]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004910:	4b08      	ldr	r3, [pc, #32]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004920:	4904      	ldr	r1, [pc, #16]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004928:	7cbb      	ldrb	r3, [r7, #18]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000

08004938 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8004940:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <HAL_RCCEx_CRSConfig+0x7c>)
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <HAL_RCCEx_CRSConfig+0x7c>)
 8004946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494a:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 800494c:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_RCCEx_CRSConfig+0x7c>)
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	4a18      	ldr	r2, [pc, #96]	; (80049b4 <HAL_RCCEx_CRSConfig+0x7c>)
 8004952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004956:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8004980:	4a0d      	ldr	r2, [pc, #52]	; (80049b8 <HAL_RCCEx_CRSConfig+0x80>)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits for STM32L412xx/L422xx or TRIM[5:0] bits otherwise
     according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8004986:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <HAL_RCCEx_CRSConfig+0x80>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	4908      	ldr	r1, [pc, #32]	; (80049b8 <HAL_RCCEx_CRSConfig+0x80>)
 8004996:	4313      	orrs	r3, r2
 8004998:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800499a:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <HAL_RCCEx_CRSConfig+0x80>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a06      	ldr	r2, [pc, #24]	; (80049b8 <HAL_RCCEx_CRSConfig+0x80>)
 80049a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049a4:	6013      	str	r3, [r2, #0]
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40006000 	.word	0x40006000

080049bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ca:	4b73      	ldr	r3, [pc, #460]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049d6:	4b70      	ldr	r3, [pc, #448]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0203 	and.w	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d10d      	bne.n	8004a02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
       ||
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049ee:	4b6a      	ldr	r3, [pc, #424]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
       ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d044      	beq.n	8004a8c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	73fb      	strb	r3, [r7, #15]
 8004a06:	e041      	b.n	8004a8c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d00c      	beq.n	8004a2a <RCCEx_PLLSAI1_Config+0x6e>
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d013      	beq.n	8004a3c <RCCEx_PLLSAI1_Config+0x80>
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d120      	bne.n	8004a5a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a18:	4b5f      	ldr	r3, [pc, #380]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11d      	bne.n	8004a60 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a28:	e01a      	b.n	8004a60 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a2a:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d116      	bne.n	8004a64 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a3a:	e013      	b.n	8004a64 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a3c:	4b56      	ldr	r3, [pc, #344]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10f      	bne.n	8004a68 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a48:	4b53      	ldr	r3, [pc, #332]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a58:	e006      	b.n	8004a68 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a5e:	e004      	b.n	8004a6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004a60:	bf00      	nop
 8004a62:	e002      	b.n	8004a6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004a68:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10d      	bne.n	8004a8c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a70:	4b49      	ldr	r3, [pc, #292]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6819      	ldr	r1, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	430b      	orrs	r3, r1
 8004a86:	4944      	ldr	r1, [pc, #272]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d17c      	bne.n	8004b8c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a92:	4b41      	ldr	r3, [pc, #260]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9e:	f7fd f841 	bl	8001b24 <HAL_GetTick>
 8004aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004aa4:	e009      	b.n	8004aba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aa6:	f7fd f83d 	bl	8001b24 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d902      	bls.n	8004aba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	73fb      	strb	r3, [r7, #15]
        break;
 8004ab8:	e005      	b.n	8004ac6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004aba:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1ef      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d15f      	bne.n	8004b8c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d110      	bne.n	8004af4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ad2:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ada:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6892      	ldr	r2, [r2, #8]
 8004ae2:	0211      	lsls	r1, r2, #8
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	68d2      	ldr	r2, [r2, #12]
 8004ae8:	06d2      	lsls	r2, r2, #27
 8004aea:	430a      	orrs	r2, r1
 8004aec:	492a      	ldr	r1, [pc, #168]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	610b      	str	r3, [r1, #16]
 8004af2:	e027      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d112      	bne.n	8004b20 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004afa:	4b27      	ldr	r3, [pc, #156]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6892      	ldr	r2, [r2, #8]
 8004b0a:	0211      	lsls	r1, r2, #8
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6912      	ldr	r2, [r2, #16]
 8004b10:	0852      	lsrs	r2, r2, #1
 8004b12:	3a01      	subs	r2, #1
 8004b14:	0552      	lsls	r2, r2, #21
 8004b16:	430a      	orrs	r2, r1
 8004b18:	491f      	ldr	r1, [pc, #124]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	610b      	str	r3, [r1, #16]
 8004b1e:	e011      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6892      	ldr	r2, [r2, #8]
 8004b30:	0211      	lsls	r1, r2, #8
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6952      	ldr	r2, [r2, #20]
 8004b36:	0852      	lsrs	r2, r2, #1
 8004b38:	3a01      	subs	r2, #1
 8004b3a:	0652      	lsls	r2, r2, #25
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	4916      	ldr	r1, [pc, #88]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b44:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b50:	f7fc ffe8 	bl	8001b24 <HAL_GetTick>
 8004b54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b56:	e009      	b.n	8004b6c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b58:	f7fc ffe4 	bl	8001b24 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d902      	bls.n	8004b6c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	73fb      	strb	r3, [r7, #15]
          break;
 8004b6a:	e005      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ef      	beq.n	8004b58 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	4904      	ldr	r1, [pc, #16]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000

08004b9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004baa:	4b68      	ldr	r3, [pc, #416]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d018      	beq.n	8004be8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004bb6:	4b65      	ldr	r3, [pc, #404]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0203 	and.w	r2, r3, #3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d10d      	bne.n	8004be2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004bce:	4b5f      	ldr	r3, [pc, #380]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	091b      	lsrs	r3, r3, #4
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d044      	beq.n	8004c6c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
 8004be6:	e041      	b.n	8004c6c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d00c      	beq.n	8004c0a <RCCEx_PLLSAI2_Config+0x6e>
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d013      	beq.n	8004c1c <RCCEx_PLLSAI2_Config+0x80>
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d120      	bne.n	8004c3a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bf8:	4b54      	ldr	r3, [pc, #336]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d11d      	bne.n	8004c40 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c08:	e01a      	b.n	8004c40 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c0a:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d116      	bne.n	8004c44 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1a:	e013      	b.n	8004c44 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c1c:	4b4b      	ldr	r3, [pc, #300]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10f      	bne.n	8004c48 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c28:	4b48      	ldr	r3, [pc, #288]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c38:	e006      	b.n	8004c48 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3e:	e004      	b.n	8004c4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004c40:	bf00      	nop
 8004c42:	e002      	b.n	8004c4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004c44:	bf00      	nop
 8004c46:	e000      	b.n	8004c4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004c48:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c50:	4b3e      	ldr	r3, [pc, #248]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6819      	ldr	r1, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	430b      	orrs	r3, r1
 8004c66:	4939      	ldr	r1, [pc, #228]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d166      	bne.n	8004d40 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c72:	4b36      	ldr	r3, [pc, #216]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a35      	ldr	r2, [pc, #212]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7e:	f7fc ff51 	bl	8001b24 <HAL_GetTick>
 8004c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c84:	e009      	b.n	8004c9a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c86:	f7fc ff4d 	bl	8001b24 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d902      	bls.n	8004c9a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	73fb      	strb	r3, [r7, #15]
        break;
 8004c98:	e005      	b.n	8004ca6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ef      	bne.n	8004c86 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d149      	bne.n	8004d40 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d110      	bne.n	8004cd4 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cb2:	4b26      	ldr	r3, [pc, #152]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004cba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	0211      	lsls	r1, r2, #8
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68d2      	ldr	r2, [r2, #12]
 8004cc8:	06d2      	lsls	r2, r2, #27
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	491f      	ldr	r1, [pc, #124]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	614b      	str	r3, [r1, #20]
 8004cd2:	e011      	b.n	8004cf8 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6892      	ldr	r2, [r2, #8]
 8004ce4:	0211      	lsls	r1, r2, #8
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6912      	ldr	r2, [r2, #16]
 8004cea:	0852      	lsrs	r2, r2, #1
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0652      	lsls	r2, r2, #25
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	4916      	ldr	r1, [pc, #88]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cf8:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fc ff0e 	bl	8001b24 <HAL_GetTick>
 8004d08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d0a:	e009      	b.n	8004d20 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d0c:	f7fc ff0a 	bl	8001b24 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d902      	bls.n	8004d20 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d1e:	e005      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ef      	beq.n	8004d0c <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d32:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	4904      	ldr	r1, [pc, #16]	; (8004d4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000

08004d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e07c      	b.n	8004e5c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7fc fbd3 	bl	8001528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2202      	movs	r2, #2
 8004d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d98:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004da2:	d902      	bls.n	8004daa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e002      	b.n	8004db0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004db8:	d007      	beq.n	8004dca <HAL_SPI_Init+0x7a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dc2:	d002      	beq.n	8004dca <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10b      	bne.n	8004dea <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dda:	d903      	bls.n	8004de4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
 8004de2:	e002      	b.n	8004dea <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	ea42 0103 	orr.w	r1, r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	f003 0204 	and.w	r2, r3, #4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	ea42 0103 	orr.w	r1, r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e040      	b.n	8004ef8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc fbf8 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2224      	movs	r2, #36	; 0x24
 8004e90:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f82c 	bl	8004f00 <UART_SetConfig>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e022      	b.n	8004ef8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fb92 	bl	80055e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fc19 	bl	8005728 <UART_CheckIdleState>
 8004ef6:	4603      	mov	r3, r0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004f04:	b08a      	sub	sp, #40	; 0x28
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4bb8      	ldr	r3, [pc, #736]	; (8005218 <UART_SetConfig+0x318>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4aae      	ldr	r2, [pc, #696]	; (800521c <UART_SetConfig+0x31c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f82:	430a      	orrs	r2, r1
 8004f84:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4aa5      	ldr	r2, [pc, #660]	; (8005220 <UART_SetConfig+0x320>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d126      	bne.n	8004fde <UART_SetConfig+0xde>
 8004f90:	4ba4      	ldr	r3, [pc, #656]	; (8005224 <UART_SetConfig+0x324>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d81a      	bhi.n	8004fd4 <UART_SetConfig+0xd4>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <UART_SetConfig+0xa4>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004fb5 	.word	0x08004fb5
 8004fa8:	08004fc5 	.word	0x08004fc5
 8004fac:	08004fbd 	.word	0x08004fbd
 8004fb0:	08004fcd 	.word	0x08004fcd
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fba:	e105      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc2:	e101      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fca:	e0fd      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd2:	e0f9      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fda:	bf00      	nop
 8004fdc:	e0f4      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a91      	ldr	r2, [pc, #580]	; (8005228 <UART_SetConfig+0x328>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d138      	bne.n	800505a <UART_SetConfig+0x15a>
 8004fe8:	4b8e      	ldr	r3, [pc, #568]	; (8005224 <UART_SetConfig+0x324>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	2b0c      	cmp	r3, #12
 8004ff4:	d82c      	bhi.n	8005050 <UART_SetConfig+0x150>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <UART_SetConfig+0xfc>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	08005031 	.word	0x08005031
 8005000:	08005051 	.word	0x08005051
 8005004:	08005051 	.word	0x08005051
 8005008:	08005051 	.word	0x08005051
 800500c:	08005041 	.word	0x08005041
 8005010:	08005051 	.word	0x08005051
 8005014:	08005051 	.word	0x08005051
 8005018:	08005051 	.word	0x08005051
 800501c:	08005039 	.word	0x08005039
 8005020:	08005051 	.word	0x08005051
 8005024:	08005051 	.word	0x08005051
 8005028:	08005051 	.word	0x08005051
 800502c:	08005049 	.word	0x08005049
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005036:	e0c7      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8005038:	2302      	movs	r3, #2
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503e:	e0c3      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8005040:	2304      	movs	r3, #4
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005046:	e0bf      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8005048:	2308      	movs	r3, #8
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504e:	e0bb      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8005050:	2310      	movs	r3, #16
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005056:	bf00      	nop
 8005058:	e0b6      	b.n	80051c8 <UART_SetConfig+0x2c8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a73      	ldr	r2, [pc, #460]	; (800522c <UART_SetConfig+0x32c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d125      	bne.n	80050b0 <UART_SetConfig+0x1b0>
 8005064:	4b6f      	ldr	r3, [pc, #444]	; (8005224 <UART_SetConfig+0x324>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800506e:	2b10      	cmp	r3, #16
 8005070:	d011      	beq.n	8005096 <UART_SetConfig+0x196>
 8005072:	2b10      	cmp	r3, #16
 8005074:	d802      	bhi.n	800507c <UART_SetConfig+0x17c>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <UART_SetConfig+0x186>
 800507a:	e014      	b.n	80050a6 <UART_SetConfig+0x1a6>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d006      	beq.n	800508e <UART_SetConfig+0x18e>
 8005080:	2b30      	cmp	r3, #48	; 0x30
 8005082:	d00c      	beq.n	800509e <UART_SetConfig+0x19e>
 8005084:	e00f      	b.n	80050a6 <UART_SetConfig+0x1a6>
 8005086:	2300      	movs	r3, #0
 8005088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508c:	e09c      	b.n	80051c8 <UART_SetConfig+0x2c8>
 800508e:	2302      	movs	r3, #2
 8005090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005094:	e098      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8005096:	2304      	movs	r3, #4
 8005098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509c:	e094      	b.n	80051c8 <UART_SetConfig+0x2c8>
 800509e:	2308      	movs	r3, #8
 80050a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a4:	e090      	b.n	80051c8 <UART_SetConfig+0x2c8>
 80050a6:	2310      	movs	r3, #16
 80050a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ac:	bf00      	nop
 80050ae:	e08b      	b.n	80051c8 <UART_SetConfig+0x2c8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a5e      	ldr	r2, [pc, #376]	; (8005230 <UART_SetConfig+0x330>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d125      	bne.n	8005106 <UART_SetConfig+0x206>
 80050ba:	4b5a      	ldr	r3, [pc, #360]	; (8005224 <UART_SetConfig+0x324>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d011      	beq.n	80050ec <UART_SetConfig+0x1ec>
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d802      	bhi.n	80050d2 <UART_SetConfig+0x1d2>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <UART_SetConfig+0x1dc>
 80050d0:	e014      	b.n	80050fc <UART_SetConfig+0x1fc>
 80050d2:	2b80      	cmp	r3, #128	; 0x80
 80050d4:	d006      	beq.n	80050e4 <UART_SetConfig+0x1e4>
 80050d6:	2bc0      	cmp	r3, #192	; 0xc0
 80050d8:	d00c      	beq.n	80050f4 <UART_SetConfig+0x1f4>
 80050da:	e00f      	b.n	80050fc <UART_SetConfig+0x1fc>
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e071      	b.n	80051c8 <UART_SetConfig+0x2c8>
 80050e4:	2302      	movs	r3, #2
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ea:	e06d      	b.n	80051c8 <UART_SetConfig+0x2c8>
 80050ec:	2304      	movs	r3, #4
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	e069      	b.n	80051c8 <UART_SetConfig+0x2c8>
 80050f4:	2308      	movs	r3, #8
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fa:	e065      	b.n	80051c8 <UART_SetConfig+0x2c8>
 80050fc:	2310      	movs	r3, #16
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005102:	bf00      	nop
 8005104:	e060      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a4a      	ldr	r2, [pc, #296]	; (8005234 <UART_SetConfig+0x334>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d129      	bne.n	8005164 <UART_SetConfig+0x264>
 8005110:	4b44      	ldr	r3, [pc, #272]	; (8005224 <UART_SetConfig+0x324>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511e:	d014      	beq.n	800514a <UART_SetConfig+0x24a>
 8005120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005124:	d802      	bhi.n	800512c <UART_SetConfig+0x22c>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <UART_SetConfig+0x23a>
 800512a:	e016      	b.n	800515a <UART_SetConfig+0x25a>
 800512c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005130:	d007      	beq.n	8005142 <UART_SetConfig+0x242>
 8005132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005136:	d00c      	beq.n	8005152 <UART_SetConfig+0x252>
 8005138:	e00f      	b.n	800515a <UART_SetConfig+0x25a>
 800513a:	2300      	movs	r3, #0
 800513c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005140:	e042      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8005142:	2302      	movs	r3, #2
 8005144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005148:	e03e      	b.n	80051c8 <UART_SetConfig+0x2c8>
 800514a:	2304      	movs	r3, #4
 800514c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005150:	e03a      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8005152:	2308      	movs	r3, #8
 8005154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005158:	e036      	b.n	80051c8 <UART_SetConfig+0x2c8>
 800515a:	2310      	movs	r3, #16
 800515c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005160:	bf00      	nop
 8005162:	e031      	b.n	80051c8 <UART_SetConfig+0x2c8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2c      	ldr	r2, [pc, #176]	; (800521c <UART_SetConfig+0x31c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d129      	bne.n	80051c2 <UART_SetConfig+0x2c2>
 800516e:	4b2d      	ldr	r3, [pc, #180]	; (8005224 <UART_SetConfig+0x324>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517c:	d014      	beq.n	80051a8 <UART_SetConfig+0x2a8>
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005182:	d802      	bhi.n	800518a <UART_SetConfig+0x28a>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <UART_SetConfig+0x298>
 8005188:	e016      	b.n	80051b8 <UART_SetConfig+0x2b8>
 800518a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518e:	d007      	beq.n	80051a0 <UART_SetConfig+0x2a0>
 8005190:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005194:	d00c      	beq.n	80051b0 <UART_SetConfig+0x2b0>
 8005196:	e00f      	b.n	80051b8 <UART_SetConfig+0x2b8>
 8005198:	2300      	movs	r3, #0
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519e:	e013      	b.n	80051c8 <UART_SetConfig+0x2c8>
 80051a0:	2302      	movs	r3, #2
 80051a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a6:	e00f      	b.n	80051c8 <UART_SetConfig+0x2c8>
 80051a8:	2304      	movs	r3, #4
 80051aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ae:	e00b      	b.n	80051c8 <UART_SetConfig+0x2c8>
 80051b0:	2308      	movs	r3, #8
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b6:	e007      	b.n	80051c8 <UART_SetConfig+0x2c8>
 80051b8:	2310      	movs	r3, #16
 80051ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051be:	bf00      	nop
 80051c0:	e002      	b.n	80051c8 <UART_SetConfig+0x2c8>
 80051c2:	2310      	movs	r3, #16
 80051c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <UART_SetConfig+0x31c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	f040 80fe 	bne.w	80053d0 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d837      	bhi.n	800524c <UART_SetConfig+0x34c>
 80051dc:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0x2e4>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005209 	.word	0x08005209
 80051e8:	0800524d 	.word	0x0800524d
 80051ec:	08005211 	.word	0x08005211
 80051f0:	0800524d 	.word	0x0800524d
 80051f4:	0800523d 	.word	0x0800523d
 80051f8:	0800524d 	.word	0x0800524d
 80051fc:	0800524d 	.word	0x0800524d
 8005200:	0800524d 	.word	0x0800524d
 8005204:	08005245 	.word	0x08005245
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005208:	f7ff f812 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 800520c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800520e:	e020      	b.n	8005252 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005210:	4b09      	ldr	r3, [pc, #36]	; (8005238 <UART_SetConfig+0x338>)
 8005212:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005214:	e01d      	b.n	8005252 <UART_SetConfig+0x352>
 8005216:	bf00      	nop
 8005218:	efff69f3 	.word	0xefff69f3
 800521c:	40008000 	.word	0x40008000
 8005220:	40013800 	.word	0x40013800
 8005224:	40021000 	.word	0x40021000
 8005228:	40004400 	.word	0x40004400
 800522c:	40004800 	.word	0x40004800
 8005230:	40004c00 	.word	0x40004c00
 8005234:	40005000 	.word	0x40005000
 8005238:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800523c:	f7fe ff62 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 8005240:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005242:	e006      	b.n	8005252 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005248:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800524a:	e002      	b.n	8005252 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	76fb      	strb	r3, [r7, #27]
        break;
 8005250:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 81b9 	beq.w	80055cc <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	4413      	add	r3, r2
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	429a      	cmp	r2, r3
 8005268:	d305      	bcc.n	8005276 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	429a      	cmp	r2, r3
 8005274:	d902      	bls.n	800527c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	76fb      	strb	r3, [r7, #27]
 800527a:	e1a7      	b.n	80055cc <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800527c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005280:	2b08      	cmp	r3, #8
 8005282:	f200 8092 	bhi.w	80053aa <UART_SetConfig+0x4aa>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0x38c>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080053ab 	.word	0x080053ab
 8005294:	080052ff 	.word	0x080052ff
 8005298:	080053ab 	.word	0x080053ab
 800529c:	08005333 	.word	0x08005333
 80052a0:	080053ab 	.word	0x080053ab
 80052a4:	080053ab 	.word	0x080053ab
 80052a8:	080053ab 	.word	0x080053ab
 80052ac:	08005381 	.word	0x08005381
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80052b0:	f7fe ffbe 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 80052b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4619      	mov	r1, r3
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	f04f 0400 	mov.w	r4, #0
 80052c6:	0214      	lsls	r4, r2, #8
 80052c8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80052cc:	020b      	lsls	r3, r1, #8
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6852      	ldr	r2, [r2, #4]
 80052d2:	0852      	lsrs	r2, r2, #1
 80052d4:	4611      	mov	r1, r2
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	eb13 0b01 	adds.w	fp, r3, r1
 80052de:	eb44 0c02 	adc.w	ip, r4, r2
 80052e2:	4658      	mov	r0, fp
 80052e4:	4661      	mov	r1, ip
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f04f 0400 	mov.w	r4, #0
 80052ee:	461a      	mov	r2, r3
 80052f0:	4623      	mov	r3, r4
 80052f2:	f7fa ff7b 	bl	80001ec <__aeabi_uldivmod>
 80052f6:	4603      	mov	r3, r0
 80052f8:	460c      	mov	r4, r1
 80052fa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80052fc:	e058      	b.n	80053b0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	085b      	lsrs	r3, r3, #1
 8005304:	f04f 0400 	mov.w	r4, #0
 8005308:	49ae      	ldr	r1, [pc, #696]	; (80055c4 <UART_SetConfig+0x6c4>)
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	eb13 0b01 	adds.w	fp, r3, r1
 8005312:	eb44 0c02 	adc.w	ip, r4, r2
 8005316:	4658      	mov	r0, fp
 8005318:	4661      	mov	r1, ip
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f04f 0400 	mov.w	r4, #0
 8005322:	461a      	mov	r2, r3
 8005324:	4623      	mov	r3, r4
 8005326:	f7fa ff61 	bl	80001ec <__aeabi_uldivmod>
 800532a:	4603      	mov	r3, r0
 800532c:	460c      	mov	r4, r1
 800532e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005330:	e03e      	b.n	80053b0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005332:	f7fe fee7 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 8005336:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4619      	mov	r1, r3
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	0214      	lsls	r4, r2, #8
 800534a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800534e:	020b      	lsls	r3, r1, #8
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6852      	ldr	r2, [r2, #4]
 8005354:	0852      	lsrs	r2, r2, #1
 8005356:	4611      	mov	r1, r2
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	eb13 0b01 	adds.w	fp, r3, r1
 8005360:	eb44 0c02 	adc.w	ip, r4, r2
 8005364:	4658      	mov	r0, fp
 8005366:	4661      	mov	r1, ip
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f04f 0400 	mov.w	r4, #0
 8005370:	461a      	mov	r2, r3
 8005372:	4623      	mov	r3, r4
 8005374:	f7fa ff3a 	bl	80001ec <__aeabi_uldivmod>
 8005378:	4603      	mov	r3, r0
 800537a:	460c      	mov	r4, r1
 800537c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800537e:	e017      	b.n	80053b0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	085b      	lsrs	r3, r3, #1
 8005386:	f04f 0400 	mov.w	r4, #0
 800538a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800538e:	f144 0100 	adc.w	r1, r4, #0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	461a      	mov	r2, r3
 800539c:	4623      	mov	r3, r4
 800539e:	f7fa ff25 	bl	80001ec <__aeabi_uldivmod>
 80053a2:	4603      	mov	r3, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80053a8:	e002      	b.n	80053b0 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	76fb      	strb	r3, [r7, #27]
            break;
 80053ae:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053b6:	d308      	bcc.n	80053ca <UART_SetConfig+0x4ca>
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053be:	d204      	bcs.n	80053ca <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	60da      	str	r2, [r3, #12]
 80053c8:	e100      	b.n	80055cc <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	76fb      	strb	r3, [r7, #27]
 80053ce:	e0fd      	b.n	80055cc <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d8:	f040 8084 	bne.w	80054e4 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80053dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d85f      	bhi.n	80054a4 <UART_SetConfig+0x5a4>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <UART_SetConfig+0x4ec>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005431 	.word	0x08005431
 80053f4:	08005451 	.word	0x08005451
 80053f8:	080054a5 	.word	0x080054a5
 80053fc:	0800546d 	.word	0x0800546d
 8005400:	080054a5 	.word	0x080054a5
 8005404:	080054a5 	.word	0x080054a5
 8005408:	080054a5 	.word	0x080054a5
 800540c:	0800548d 	.word	0x0800548d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005410:	f7fe ff0e 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 8005414:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	005a      	lsls	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	441a      	add	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	fbb2 f3f3 	udiv	r3, r2, r3
 800542a:	b29b      	uxth	r3, r3
 800542c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800542e:	e03c      	b.n	80054aa <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005430:	f7fe ff14 	bl	800425c <HAL_RCC_GetPCLK2Freq>
 8005434:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	005a      	lsls	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	441a      	add	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	fbb2 f3f3 	udiv	r3, r2, r3
 800544a:	b29b      	uxth	r3, r3
 800544c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800544e:	e02c      	b.n	80054aa <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800545a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6852      	ldr	r2, [r2, #4]
 8005462:	fbb3 f3f2 	udiv	r3, r3, r2
 8005466:	b29b      	uxth	r3, r3
 8005468:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800546a:	e01e      	b.n	80054aa <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800546c:	f7fe fe4a 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 8005470:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	005a      	lsls	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	fbb2 f3f3 	udiv	r3, r2, r3
 8005486:	b29b      	uxth	r3, r3
 8005488:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800548a:	e00e      	b.n	80054aa <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	085b      	lsrs	r3, r3, #1
 8005492:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	fbb2 f3f3 	udiv	r3, r2, r3
 800549e:	b29b      	uxth	r3, r3
 80054a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80054a2:	e002      	b.n	80054aa <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	76fb      	strb	r3, [r7, #27]
        break;
 80054a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	2b0f      	cmp	r3, #15
 80054ae:	d916      	bls.n	80054de <UART_SetConfig+0x5de>
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b6:	d212      	bcs.n	80054de <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f023 030f 	bic.w	r3, r3, #15
 80054c0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	085b      	lsrs	r3, r3, #1
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	89fb      	ldrh	r3, [r7, #14]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	89fa      	ldrh	r2, [r7, #14]
 80054da:	60da      	str	r2, [r3, #12]
 80054dc:	e076      	b.n	80055cc <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	76fb      	strb	r3, [r7, #27]
 80054e2:	e073      	b.n	80055cc <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80054e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d85c      	bhi.n	80055a6 <UART_SetConfig+0x6a6>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <UART_SetConfig+0x5f4>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005537 	.word	0x08005537
 80054fc:	08005555 	.word	0x08005555
 8005500:	080055a7 	.word	0x080055a7
 8005504:	08005571 	.word	0x08005571
 8005508:	080055a7 	.word	0x080055a7
 800550c:	080055a7 	.word	0x080055a7
 8005510:	080055a7 	.word	0x080055a7
 8005514:	0800558f 	.word	0x0800558f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005518:	f7fe fe8a 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 800551c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	085a      	lsrs	r2, r3, #1
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	441a      	add	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	b29b      	uxth	r3, r3
 8005532:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005534:	e03a      	b.n	80055ac <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005536:	f7fe fe91 	bl	800425c <HAL_RCC_GetPCLK2Freq>
 800553a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	085a      	lsrs	r2, r3, #1
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	441a      	add	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005552:	e02b      	b.n	80055ac <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800555e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6852      	ldr	r2, [r2, #4]
 8005566:	fbb3 f3f2 	udiv	r3, r3, r2
 800556a:	b29b      	uxth	r3, r3
 800556c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800556e:	e01d      	b.n	80055ac <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005570:	f7fe fdc8 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 8005574:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	085a      	lsrs	r2, r3, #1
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	441a      	add	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	fbb2 f3f3 	udiv	r3, r2, r3
 8005588:	b29b      	uxth	r3, r3
 800558a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800558c:	e00e      	b.n	80055ac <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055a4:	e002      	b.n	80055ac <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	76fb      	strb	r3, [r7, #27]
        break;
 80055aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2b0f      	cmp	r3, #15
 80055b0:	d90a      	bls.n	80055c8 <UART_SetConfig+0x6c8>
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b8:	d206      	bcs.n	80055c8 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	e003      	b.n	80055cc <UART_SetConfig+0x6cc>
 80055c4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80055d8:	7efb      	ldrb	r3, [r7, #27]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3728      	adds	r7, #40	; 0x28
 80055de:	46bd      	mov	sp, r7
 80055e0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080055e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01a      	beq.n	80056fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e2:	d10a      	bne.n	80056fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	605a      	str	r2, [r3, #4]
  }
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af02      	add	r7, sp, #8
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005736:	f7fc f9f5 	bl	8001b24 <HAL_GetTick>
 800573a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b08      	cmp	r3, #8
 8005748:	d10e      	bne.n	8005768 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800574a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f82a 	bl	80057b2 <UART_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e020      	b.n	80057aa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b04      	cmp	r3, #4
 8005774:	d10e      	bne.n	8005794 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f814 	bl	80057b2 <UART_WaitOnFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e00a      	b.n	80057aa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	603b      	str	r3, [r7, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c2:	e05d      	b.n	8005880 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d059      	beq.n	8005880 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057cc:	f7fc f9aa 	bl	8001b24 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d11b      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2220      	movs	r2, #32
 8005806:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e042      	b.n	80058a0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d02b      	beq.n	8005880 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005836:	d123      	bne.n	8005880 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005840:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005850:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0201 	bic.w	r2, r2, #1
 8005860:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e00f      	b.n	80058a0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69da      	ldr	r2, [r3, #28]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4013      	ands	r3, r2
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	429a      	cmp	r2, r3
 800588e:	bf0c      	ite	eq
 8005890:	2301      	moveq	r3, #1
 8005892:	2300      	movne	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	429a      	cmp	r2, r3
 800589c:	d092      	beq.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <__libc_init_array>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	4e0d      	ldr	r6, [pc, #52]	; (80058e0 <__libc_init_array+0x38>)
 80058ac:	4c0d      	ldr	r4, [pc, #52]	; (80058e4 <__libc_init_array+0x3c>)
 80058ae:	1ba4      	subs	r4, r4, r6
 80058b0:	10a4      	asrs	r4, r4, #2
 80058b2:	2500      	movs	r5, #0
 80058b4:	42a5      	cmp	r5, r4
 80058b6:	d109      	bne.n	80058cc <__libc_init_array+0x24>
 80058b8:	4e0b      	ldr	r6, [pc, #44]	; (80058e8 <__libc_init_array+0x40>)
 80058ba:	4c0c      	ldr	r4, [pc, #48]	; (80058ec <__libc_init_array+0x44>)
 80058bc:	f000 f820 	bl	8005900 <_init>
 80058c0:	1ba4      	subs	r4, r4, r6
 80058c2:	10a4      	asrs	r4, r4, #2
 80058c4:	2500      	movs	r5, #0
 80058c6:	42a5      	cmp	r5, r4
 80058c8:	d105      	bne.n	80058d6 <__libc_init_array+0x2e>
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
 80058cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058d0:	4798      	blx	r3
 80058d2:	3501      	adds	r5, #1
 80058d4:	e7ee      	b.n	80058b4 <__libc_init_array+0xc>
 80058d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058da:	4798      	blx	r3
 80058dc:	3501      	adds	r5, #1
 80058de:	e7f2      	b.n	80058c6 <__libc_init_array+0x1e>
 80058e0:	08005968 	.word	0x08005968
 80058e4:	08005968 	.word	0x08005968
 80058e8:	08005968 	.word	0x08005968
 80058ec:	0800596c 	.word	0x0800596c

080058f0 <memset>:
 80058f0:	4402      	add	r2, r0
 80058f2:	4603      	mov	r3, r0
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d100      	bne.n	80058fa <memset+0xa>
 80058f8:	4770      	bx	lr
 80058fa:	f803 1b01 	strb.w	r1, [r3], #1
 80058fe:	e7f9      	b.n	80058f4 <memset+0x4>

08005900 <_init>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	bf00      	nop
 8005904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005906:	bc08      	pop	{r3}
 8005908:	469e      	mov	lr, r3
 800590a:	4770      	bx	lr

0800590c <_fini>:
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	bf00      	nop
 8005910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005912:	bc08      	pop	{r3}
 8005914:	469e      	mov	lr, r3
 8005916:	4770      	bx	lr
